//*****************************************************************************
// c2bl
//
// File:   c2bl.bl
// Author: Martin Dorazil
// Date:   9/19/2019
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//*****************************************************************************

#load "std/print.bl"
#load "clang.bl"

test_file :=  "test/testfile.h";

main :: fn () u32 {
    idx := clang_createIndex(0, 0);
    defer clang_disposeIndex(idx);

    tu : CXTranslationUnit = null;
    result := clang_parseTranslationUnit2(idx, test_file.ptr, null, 0, null, 0, 0, &tu);
    defer clang_disposeTranslationUnit(tu);

    if result != CXErrorCode.Success {
        eprint("Error: %\n", result);
        abort();
    }

    cursor := clang_getTranslationUnitCursor(tu);
    print("%\n", cursor);

    print("// generated from %\n", test_file);
    return clang_visitChildren(cursor, &visitor, null);
};

visitor :: fn (cursor: CXCursor, parent: CXCursor, client_data: CXClientData) CXChildVisitResult {
    if cursor.kind == CXCursorKind.StructDecl {
        print("struct decl\n");
    } else if cursor.kind == CXCursorKind.EnumDecl {
        print("enum decl\n");
    } else if cursor.kind == CXCursorKind.VarDecl {
        print("var decl\n");
    } else if cursor.kind == CXCursorKind.FunctionDecl {
        print("function decl\n");
    } else if cursor.kind == CXCursorKind.EnumConstantDecl {
        print("variant decl\n");
    } else if cursor.kind == CXCursorKind.FieldDecl {
        print("member decl\n");
    } else if cursor.kind == CXCursorKind.TypedefDecl {
        print("typedef decl\n");
    } else if cursor.kind == CXCursorKind.ParmDecl {
        print("param decl %\n", cursor.kind);
    } else {
        print("Unknown decl %\n", cursor.kind);
    }

    return CXChildVisitResult.Recurse;
};
