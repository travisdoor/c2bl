//*****************************************************************************
// c2bl
//
// File:   c2bl.bl
// Author: Martin Dorazil
// Date:   9/19/2019
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//*****************************************************************************

#load "std/print.bl"
#load "std/memory.bl"
#load "clang.bl"
#load "decl_array.bl"
#load "decl.bl"

//test_file :=  "test/testfile.h";
test_file :=  "/Users/travis/Develop/llvm-project/clang/include/clang-c/Index.h";

decl_cache := {:DeclArray: 0};

main :: fn () u32 {
    idx := clang_createIndex(0, 0);
    defer clang_disposeIndex(idx);

    options := build_TU_flags(
        CXTranslationUnit_Flags.SkipFunctionBodies,
    );
    
    tu : CXTranslationUnit = null;
    result := clang_parseTranslationUnit2(idx, test_file.ptr, null, 0, null, 0, options, &tu);
    defer clang_disposeTranslationUnit(tu);

    if result != CXErrorCode.Success {
        eprint("Error: %\n", result);
        abort();
    }

    cursor := clang_getTranslationUnitCursor(tu);

    decl_array_init(&decl_cache);
    defer decl_array_terminate(&decl_cache);

    print("// generated from %\n", test_file);
    clang_visitChildren(cursor, &visitor, null);

    emit_decl_cache();
    
    return 0;
};

visitor :: fn (cursor: CXCursor, parent: CXCursor, client_data: CXClientData) CXChildVisitResult {
    loc := clang_getCursorLocation(cursor);
    if clang_Location_isFromMainFile(loc) == 0 { 
        return CXChildVisitResult.Continue;
    }

    if cursor.kind != CXCursorKind.FunctionDecl && !clang_isCursorDefinition(cursor)  {
        return CXChildVisitResult.Continue;
    }

    cursor = clang_getCanonicalCursor(cursor);
    hash := decl_hash_from_cursor(cursor);

    if clang_isDeclaration(cursor.kind) {
        if !decl_array_contains(&decl_cache, hash) {
            decl_array_push(&decl_cache, decl_new(cursor));
        }
    }

    return CXChildVisitResult.Continue;
};

emit_decl_cache :: fn () {
    loop i := 0; i < decl_cache.data.len; i += 1 {
        decl_emit(decl_cache.data[i]);
        //eprint("%\n", ^decl_cache.data[i]);
    }
};

_emit_type :: fn (t: CXType, ignore_void: bool) {
    if t.kind == CXTypeKind.Bool       { print("bool"); return; }
    if t.kind == CXTypeKind.Char_U     { print("u8");   return; }
    if t.kind == CXTypeKind.UChar      { print("u8");   return; }
    if t.kind == CXTypeKind.Char16     { print("u16");  return; }
    if t.kind == CXTypeKind.Char32     { print("u32");  return; }
    if t.kind == CXTypeKind.UShort     { print("u16");  return; }
    if t.kind == CXTypeKind.UInt       { print("u32");  return; }
    if t.kind == CXTypeKind.ULong      { print("u32");  return; }
    if t.kind == CXTypeKind.ULongLong  { print("u64");  return; }
    if t.kind == CXTypeKind.Char_S     { print("s8");   return; }
    if t.kind == CXTypeKind.SChar      { print("s8");   return; }
    if t.kind == CXTypeKind.WChar      { print("s16");  return; }
    if t.kind == CXTypeKind.Short      { print("s16");  return; }
    if t.kind == CXTypeKind.Int        { print("s32");  return; }
    if t.kind == CXTypeKind.Long       { print("s32");  return; }
    if t.kind == CXTypeKind.LongLong   { print("s64");  return; }
    if t.kind == CXTypeKind.Float      { print("f32");  return; }
    if t.kind == CXTypeKind.Double     { print("f64");  return; }
    if t.kind == CXTypeKind.NullPtr    { print("null"); return; }

    tmp : string;

    if t.kind == CXTypeKind.Typedef {
        return;
    }

    if t.kind == CXTypeKind.Void {
        if ignore_void {
            return;
        } else {
            print("u8");
            return;
        }
    }

    if t.kind == CXTypeKind.Pointer {
        print("*");
        t = clang_getPointeeType(t);
        //emit_type(t, false);
        return;
    }

    eprint("Invalid type %\n", t);
    print("<INVALID_TYPE>");
};

#private

build_TU_flags :: fn (flags: ...CXTranslationUnit_Flags) u32 {
    result : u32 = 0;

    loop i := 0; i < flags.len; i += 1 {
        result = result | auto flags[i];
    }

    return result;
};