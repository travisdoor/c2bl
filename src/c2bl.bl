//*****************************************************************************
// c2bl
//
// File:   c2bl.bl
// Author: Martin Dorazil
// Date:   9/19/2019
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//*****************************************************************************

#load "std/print.bl"
#load "std/memory.bl"
#load "clang.bl"
#load "symbol_cache.bl"

//test_file :=  "test/testfile.h";
//test_file := "/usr/local/include/json-c/json_object.h";
//test_file :=  "/Users/travis/Develop/llvm-project/clang/include/clang-c/Index.h";
test_file :=  "/Users/travis/Develop/vulkansdk-macos-1.1.114.0/macOS/include/vulkan/vulkan_core.h";

symbol_cache := {:SymbolCache: 0};

main :: fn () u32 {
    idx := clang_createIndex(0, 0);
    defer clang_disposeIndex(idx);

    options := build_TU_flags(
        CXTranslationUnit_Flags.SkipFunctionBodies,
    );
    
    tu : CXTranslationUnit = null;
    result := clang_parseTranslationUnit2(idx, test_file.ptr, null, 0, null, 0, options, &tu);
    defer clang_disposeTranslationUnit(tu);

    if result != CXErrorCode.Success {
        eprint("Error: %\n", result);
        abort();
    }

    cursor := clang_getTranslationUnitCursor(tu);

    sc_init(&symbol_cache);
    defer sc_terminate(&symbol_cache);

    print("// generated from %\n", test_file);
    clang_visitChildren(cursor, &emit_top_level, null);
    
    return 0;
};

emit_top_level :: fn (c: CXCursor, parent: CXCursor, client_data: CXClientData) CXChildVisitResult {
    loc := clang_getCursorLocation(c);
    if clang_Location_isFromMainFile(loc) == 0 { 
        return CXChildVisitResult.Continue;
    }

    if clang_isCursorDefinition(c) || c.kind == CXCursorKind.FunctionDecl {
        if emit_decl_name(c) {
            emit_decl(c);
            print(";\n");
        }
    }

    return CXChildVisitResult.Continue;
};

emit_decl :: fn (c: CXCursor) {
    if c.kind == CXCursorKind.StructDecl {        
        print("struct {\n");
        clang_visitChildren(c, &emit_block_struct, null);
        print("}");

    } else if c.kind == CXCursorKind.TypedefDecl {
        emit_typedef(c);

    } else if c.kind == CXCursorKind.EnumDecl {
        print("enum {\n");
        clang_visitChildren(c, &emit_block_enum, null);
        print("}");

    } else if c.kind == CXCursorKind.FunctionDecl {
        emit_fn(c);
        print(" #extern");
    } else {
        error_cursor(c);
    }
};

emit_decl_name :: fn (c: CXCursor) bool #inline {
    spelling := clang_getCursorSpelling(c);
    name := {:string: auto strlen(spelling.data), spelling.data};
    if name.len == 0 { return false; }

    hash := hash_string(name);

    if sc_contains(&symbol_cache, hash) { return false; }
    print("% :: ", name);

    sc_push(&symbol_cache, hash);

    return true;
};

emit_typedef :: fn (c: CXCursor) {
    T := clang_getTypedefDeclUnderlyingType(c);
    emit_type(T, true);
};

emit_block_struct :: fn (c: CXCursor, parent: CXCursor, client_data: CXClientData) CXChildVisitResult {
    spelling := clang_getCursorSpelling(c);
    name := {:string: auto strlen(spelling.data), spelling.data};
    print("    %: ", name);

    T := clang_getCursorType(c);
    emit_type(T, true);
    print(",\n");

    return CXChildVisitResult.Continue;
};

emit_block_enum :: fn (c: CXCursor, parent: CXCursor, client_data: CXClientData) CXChildVisitResult {
    spelling := clang_getCursorSpelling(c);
    name := {:string: auto strlen(spelling.data), spelling.data};
    value :=  clang_getEnumConstantDeclValue(c);
    print("    % :: %,\n", name, value);

    return CXChildVisitResult.Continue;
};

emit_fn :: fn (c: CXCursor) {
    print("fn (");

    argc : u32 = auto clang_Cursor_getNumArguments(c);
    loop i : u32 = 0; i < argc; i += 1 {
        emit_arg(clang_Cursor_getArgument(c, i), i);

        if i < argc - 1 { print(", "); }
    }
        
    print(") ");

    T := clang_getCursorResultType(c);
    emit_type(T, true);
};

emit_arg :: fn (c: CXCursor, i: u32) {
    spelling := clang_getCursorSpelling(c);
    name := {:string: auto strlen(spelling.data), spelling.data};

    if name.len > 0 {
        print("%: ", name);
    } else {
        print("_%: ", i);
    }

    T := clang_getCursorType(c);
    emit_type(T, true);
};

emit_type :: fn (T: CXType, ignore_void: bool) {
    if T.kind == CXTypeKind.Bool       { print("bool"); return; }
    if T.kind == CXTypeKind.Char_U     { print("u8");   return; }
    if T.kind == CXTypeKind.UChar      { print("u8");   return; }
    if T.kind == CXTypeKind.Char16     { print("u16");  return; }
    if T.kind == CXTypeKind.Char32     { print("u32");  return; }
    if T.kind == CXTypeKind.UShort     { print("u16");  return; }
    if T.kind == CXTypeKind.UInt       { print("u32");  return; }
    if T.kind == CXTypeKind.ULong      { print("u32");  return; }
    if T.kind == CXTypeKind.ULongLong  { print("u64");  return; }
    if T.kind == CXTypeKind.Char_S     { print("s8");   return; }
    if T.kind == CXTypeKind.SChar      { print("s8");   return; }
    if T.kind == CXTypeKind.WChar      { print("s16");  return; }
    if T.kind == CXTypeKind.Short      { print("s16");  return; }
    if T.kind == CXTypeKind.Int        { print("s32");  return; }
    if T.kind == CXTypeKind.Long       { print("s32");  return; }
    if T.kind == CXTypeKind.LongLong   { print("s64");  return; }
    if T.kind == CXTypeKind.Float      { print("f32");  return; }
    if T.kind == CXTypeKind.Double     { print("f64");  return; }
    if T.kind == CXTypeKind.NullPtr    { print("null"); return; }

    if T.kind == CXTypeKind.Void {
        if ignore_void {
            return;
        } else {
            print("u8");
            return;
        }
    }

    if T.kind == CXTypeKind.Elaborated {
        c := clang_getTypeDeclaration(T);
        spelling := clang_getCursorSpelling(c);
        name := {:string: auto strlen(spelling.data), spelling.data};
        print("%", name);
        return;
    }

    if T.kind == CXTypeKind.Typedef {
        c := clang_getTypeDeclaration(T);
        spelling := clang_getCursorSpelling(c);
        name := {:string: auto strlen(spelling.data), spelling.data};
        print("%", name);
        return;
    }

    if T.kind == CXTypeKind.FunctionProto {
        c := clang_getTypeDeclaration(T);
        emit_fn(c);
        return;
    }

    if T.kind == CXTypeKind.Pointer {
        print("*");
        emit_type(clang_getPointeeType(T), false);
        return;
    }

    print("<INVALID_TYPE>");
    eprint("<INVALID_TYPE>: %\n", T.kind);
};

build_TU_flags :: fn (flags: ...CXTranslationUnit_Flags) u32 {
    result : u32 = 0;

    loop i := 0; i < flags.len; i += 1 {
        result = result | auto flags[i];
    }

    return result;
};

error_cursor :: fn (c: CXCursor) {
    location := clang_getCursorLocation(c);
    line : u32;
    clang_getExpansionLocation(location, null, &line, null, null);
    eprint("%: %\n", line, c.kind);
};

hash_string :: fn (s: string) u32 {
    hash : u32 = 5381;
    loop i := 0; i < s.len; i += 1 {
        hash = ((hash << 5) + hash) + auto s[i];
    }

    return hash;
};