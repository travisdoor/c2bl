//*****************************************************************************
// c2bl
//
// File:   symbol_cache.bl
// Author: Martin Dorazil
// Date:   9/19/2019
//
// Copyright 2019 Martin Dorazil
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//*****************************************************************************

SymbolCache :: struct {
    data: []u32,
    allocated: usize
};

sc_init :: fn (sc: *SymbolCache) {
    sc.data.len = 0;
    sc.data.ptr = null;
    sc.allocated = 0;
};

sc_terminate :: fn (sc: *SymbolCache) {
    mem_free(auto sc.data.ptr);
};

sc_push :: fn (sc: *SymbolCache, v: u32) {
    sc.data.len += 1;
    ensure_space(sc, auto sc.data.len);

    sc.data[sc.data.len - 1] = v;
};

sc_contains :: fn (sc: *SymbolCache, v: u32) bool {
    loop i := 0; i < sc.data.len; i += 1 {
        if sc.data[i] == v { return true; }
    }

    return false;
};

#private

ensure_space :: fn (sc: *SymbolCache, space: s64) {
    if sc.allocated >= auto space { return; }
    if sc.allocated == 0 {
        sc.allocated = 16;

        sc.data.ptr = auto mem_alloc(sc.allocated * sizeof(u32));
        return;
    }

    sc.allocated *= 2;
    sc.data.ptr = auto mem_realloc(auto sc.data.ptr, sc.allocated * sizeof(u32));
};