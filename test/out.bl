// generated from /Users/travis/Develop/llvm-project/clang/include/clang-c/Index.h
CXIndex :: *u8;
CXTargetInfo :: *;
CXTranslationUnit :: *;
CXClientData :: *u8;
CXUnsavedFile :: ;
CXAvailabilityKind :: enum {
    CXAvailability_Available :: 0,
    CXAvailability_Deprecated :: 1,
    CXAvailability_NotAvailable :: 2,
    CXAvailability_NotAccessible :: 3,
};
CXVersion :: ;
CXCursor_ExceptionSpecificationKind :: enum {
    CXCursor_ExceptionSpecificationKind_None :: 0,
    CXCursor_ExceptionSpecificationKind_DynamicNone :: 1,
    CXCursor_ExceptionSpecificationKind_Dynamic :: 2,
    CXCursor_ExceptionSpecificationKind_MSAny :: 3,
    CXCursor_ExceptionSpecificationKind_BasicNoexcept :: 4,
    CXCursor_ExceptionSpecificationKind_ComputedNoexcept :: 5,
    CXCursor_ExceptionSpecificationKind_Unevaluated :: 6,
    CXCursor_ExceptionSpecificationKind_Uninstantiated :: 7,
    CXCursor_ExceptionSpecificationKind_Unparsed :: 8,
    CXCursor_ExceptionSpecificationKind_NoThrow :: 9,
};
clang_disposeIndex :: fn (index: CXIndex) s32 #extern;
 :: enum {
    CXGlobalOpt_None :: 0,
    CXGlobalOpt_ThreadBackgroundPriorityForIndexing :: 1,
    CXGlobalOpt_ThreadBackgroundPriorityForEditing :: 2,
    CXGlobalOpt_ThreadBackgroundPriorityForAll :: 3,
};
CXGlobalOptFlags :: ;
clang_CXIndex_setGlobalOptions :: fn (_0: CXIndex, options: u32) s32 #extern;
clang_CXIndex_getGlobalOptions :: fn (_0: CXIndex) s32 #extern;
clang_CXIndex_setInvocationEmissionPathOption :: fn (_0: CXIndex, Path: *s8) s32 #extern;
CXFile :: *u8;
CXFileUniqueID :: ;
clang_getFileUniqueID :: fn (file: CXFile, outID: *CXFileUniqueID) s32 #extern;
clang_isFileMultipleIncludeGuarded :: fn (tu: CXTranslationUnit, file: CXFile) s32 #extern;
clang_getFileContents :: fn (tu: CXTranslationUnit, file: CXFile, size: *s32) *s32 #extern;
clang_File_isEqual :: fn (file1: CXFile, file2: CXFile) s32 #extern;
CXSourceLocation :: ;
CXSourceRange :: ;
clang_equalLocations :: fn (loc1: CXSourceLocation, loc2: CXSourceLocation) s32 #extern;
clang_Location_isInSystemHeader :: fn (location: CXSourceLocation) s32 #extern;
clang_Location_isFromMainFile :: fn (location: CXSourceLocation) s32 #extern;
clang_equalRanges :: fn (range1: CXSourceRange, range2: CXSourceRange) s32 #extern;
clang_Range_isNull :: fn (range: CXSourceRange) s32 #extern;
clang_getExpansionLocation :: fn (location: CXSourceLocation, file: *CXFile, line: *u32, column: *u32, offset: *u32) s32 #extern;
clang_getPresumedLocation :: fn (location: CXSourceLocation, filename: *s32, line: *u32, column: *u32) s32 #extern;
clang_getInstantiationLocation :: fn (location: CXSourceLocation, file: *CXFile, line: *u32, column: *u32, offset: *u32) s32 #extern;
clang_getSpellingLocation :: fn (location: CXSourceLocation, file: *CXFile, line: *u32, column: *u32, offset: *u32) s32 #extern;
clang_getFileLocation :: fn (location: CXSourceLocation, file: *CXFile, line: *u32, column: *u32, offset: *u32) s32 #extern;
CXSourceRangeList :: ;
clang_disposeSourceRangeList :: fn (ranges: *CXSourceRangeList) s32 #extern;
CXDiagnosticSeverity :: enum {
    CXDiagnostic_Ignored :: 0,
    CXDiagnostic_Note :: 1,
    CXDiagnostic_Warning :: 2,
    CXDiagnostic_Error :: 3,
    CXDiagnostic_Fatal :: 4,
};
CXDiagnostic :: *u8;
CXDiagnosticSet :: *u8;
clang_getNumDiagnosticsInSet :: fn (Diags: CXDiagnosticSet) s32 #extern;
CXLoadDiag_Error :: enum {
    CXLoadDiag_None :: 0,
    CXLoadDiag_Unknown :: 1,
    CXLoadDiag_CannotLoad :: 2,
    CXLoadDiag_InvalidFile :: 3,
};
clang_disposeDiagnosticSet :: fn (Diags: CXDiagnosticSet) s32 #extern;
clang_getNumDiagnostics :: fn (Unit: CXTranslationUnit) s32 #extern;
clang_disposeDiagnostic :: fn (Diagnostic: CXDiagnostic) s32 #extern;
CXDiagnosticDisplayOptions :: enum {
    CXDiagnostic_DisplaySourceLocation :: 1,
    CXDiagnostic_DisplayColumn :: 2,
    CXDiagnostic_DisplaySourceRanges :: 4,
    CXDiagnostic_DisplayOption :: 8,
    CXDiagnostic_DisplayCategoryId :: 16,
    CXDiagnostic_DisplayCategoryName :: 32,
};
clang_defaultDiagnosticDisplayOptions :: fn () s32 #extern;
clang_getDiagnosticSeverity :: fn (_0: CXDiagnostic) s32 #extern;
clang_getDiagnosticCategory :: fn (_0: CXDiagnostic) s32 #extern;
clang_getDiagnosticNumRanges :: fn (_0: CXDiagnostic) s32 #extern;
clang_getDiagnosticNumFixIts :: fn (Diagnostic: CXDiagnostic) s32 #extern;
clang_createTranslationUnit2 :: fn (CIdx: CXIndex, ast_filename: *s8, out_TU: *CXTranslationUnit) s32 #extern;
CXTranslationUnit_Flags :: enum {
    CXTranslationUnit_None :: 0,
    CXTranslationUnit_DetailedPreprocessingRecord :: 1,
    CXTranslationUnit_Incomplete :: 2,
    CXTranslationUnit_PrecompiledPreamble :: 4,
    CXTranslationUnit_CacheCompletionResults :: 8,
    CXTranslationUnit_ForSerialization :: 16,
    CXTranslationUnit_CXXChainedPCH :: 32,
    CXTranslationUnit_SkipFunctionBodies :: 64,
    CXTranslationUnit_IncludeBriefCommentsInCodeCompletion :: 128,
    CXTranslationUnit_CreatePreambleOnFirstParse :: 256,
    CXTranslationUnit_KeepGoing :: 512,
    CXTranslationUnit_SingleFileParse :: 1024,
    CXTranslationUnit_LimitSkipFunctionBodiesToPreamble :: 2048,
    CXTranslationUnit_IncludeAttributedTypes :: 4096,
    CXTranslationUnit_VisitImplicitAttributes :: 8192,
    CXTranslationUnit_IgnoreNonErrorsFromIncludedFiles :: 16384,
    CXTranslationUnit_RetainExcludedConditionalBlocks :: 32768,
};
clang_defaultEditingTranslationUnitOptions :: fn () s32 #extern;
clang_parseTranslationUnit2 :: fn (CIdx: CXIndex, source_filename: *s8, command_line_args: **s8, num_command_line_args: s32, unsaved_files: *, num_unsaved_files: u32, options: u32, out_TU: *CXTranslationUnit) s32 #extern;
clang_parseTranslationUnit2FullArgv :: fn (CIdx: CXIndex, source_filename: *s8, command_line_args: **s8, num_command_line_args: s32, unsaved_files: *, num_unsaved_files: u32, options: u32, out_TU: *CXTranslationUnit) s32 #extern;
CXSaveTranslationUnit_Flags :: enum {
    CXSaveTranslationUnit_None :: 0,
};
clang_defaultSaveOptions :: fn (TU: CXTranslationUnit) s32 #extern;
CXSaveError :: enum {
    CXSaveError_None :: 0,
    CXSaveError_Unknown :: 1,
    CXSaveError_TranslationErrors :: 2,
    CXSaveError_InvalidTU :: 3,
};
clang_saveTranslationUnit :: fn (TU: CXTranslationUnit, FileName: *s8, options: u32) s32 #extern;
clang_suspendTranslationUnit :: fn (_0: CXTranslationUnit) s32 #extern;
clang_disposeTranslationUnit :: fn (_0: CXTranslationUnit) s32 #extern;
CXReparse_Flags :: enum {
    CXReparse_None :: 0,
};
clang_defaultReparseOptions :: fn (TU: CXTranslationUnit) s32 #extern;
clang_reparseTranslationUnit :: fn (TU: CXTranslationUnit, num_unsaved_files: u32, unsaved_files: *, options: u32) s32 #extern;
CXTUResourceUsageKind :: enum {
    CXTUResourceUsage_AST :: 1,
    CXTUResourceUsage_Identifiers :: 2,
    CXTUResourceUsage_Selectors :: 3,
    CXTUResourceUsage_GlobalCompletionResults :: 4,
    CXTUResourceUsage_SourceManagerContentCache :: 5,
    CXTUResourceUsage_AST_SideTables :: 6,
    CXTUResourceUsage_SourceManager_Membuffer_Malloc :: 7,
    CXTUResourceUsage_SourceManager_Membuffer_MMap :: 8,
    CXTUResourceUsage_ExternalASTSource_Membuffer_Malloc :: 9,
    CXTUResourceUsage_ExternalASTSource_Membuffer_MMap :: 10,
    CXTUResourceUsage_Preprocessor :: 11,
    CXTUResourceUsage_PreprocessingRecord :: 12,
    CXTUResourceUsage_SourceManager_DataStructures :: 13,
    CXTUResourceUsage_Preprocessor_HeaderSearch :: 14,
    CXTUResourceUsage_MEMORY_IN_BYTES_BEGIN :: 1,
    CXTUResourceUsage_MEMORY_IN_BYTES_END :: 14,
    CXTUResourceUsage_First :: 1,
    CXTUResourceUsage_Last :: 14,
};
clang_getTUResourceUsageName :: fn (kind: ) *s32 #extern;
CXTUResourceUsageEntry :: ;
CXTUResourceUsage :: ;
clang_disposeCXTUResourceUsage :: fn (usage: CXTUResourceUsage) s32 #extern;
clang_TargetInfo_dispose :: fn (Info: CXTargetInfo) s32 #extern;
clang_TargetInfo_getPointerWidth :: fn (Info: CXTargetInfo) s32 #extern;
CXCursorKind :: enum {
    CXCursor_UnexposedDecl :: 1,
    CXCursor_StructDecl :: 2,
    CXCursor_UnionDecl :: 3,
    CXCursor_ClassDecl :: 4,
    CXCursor_EnumDecl :: 5,
    CXCursor_FieldDecl :: 6,
    CXCursor_EnumConstantDecl :: 7,
    CXCursor_FunctionDecl :: 8,
    CXCursor_VarDecl :: 9,
    CXCursor_ParmDecl :: 10,
    CXCursor_ObjCInterfaceDecl :: 11,
    CXCursor_ObjCCategoryDecl :: 12,
    CXCursor_ObjCProtocolDecl :: 13,
    CXCursor_ObjCPropertyDecl :: 14,
    CXCursor_ObjCIvarDecl :: 15,
    CXCursor_ObjCInstanceMethodDecl :: 16,
    CXCursor_ObjCClassMethodDecl :: 17,
    CXCursor_ObjCImplementationDecl :: 18,
    CXCursor_ObjCCategoryImplDecl :: 19,
    CXCursor_TypedefDecl :: 20,
    CXCursor_CXXMethod :: 21,
    CXCursor_Namespace :: 22,
    CXCursor_LinkageSpec :: 23,
    CXCursor_Constructor :: 24,
    CXCursor_Destructor :: 25,
    CXCursor_ConversionFunction :: 26,
    CXCursor_TemplateTypeParameter :: 27,
    CXCursor_NonTypeTemplateParameter :: 28,
    CXCursor_TemplateTemplateParameter :: 29,
    CXCursor_FunctionTemplate :: 30,
    CXCursor_ClassTemplate :: 31,
    CXCursor_ClassTemplatePartialSpecialization :: 32,
    CXCursor_NamespaceAlias :: 33,
    CXCursor_UsingDirective :: 34,
    CXCursor_UsingDeclaration :: 35,
    CXCursor_TypeAliasDecl :: 36,
    CXCursor_ObjCSynthesizeDecl :: 37,
    CXCursor_ObjCDynamicDecl :: 38,
    CXCursor_CXXAccessSpecifier :: 39,
    CXCursor_FirstDecl :: 1,
    CXCursor_LastDecl :: 39,
    CXCursor_FirstRef :: 40,
    CXCursor_ObjCSuperClassRef :: 40,
    CXCursor_ObjCProtocolRef :: 41,
    CXCursor_ObjCClassRef :: 42,
    CXCursor_TypeRef :: 43,
    CXCursor_CXXBaseSpecifier :: 44,
    CXCursor_TemplateRef :: 45,
    CXCursor_NamespaceRef :: 46,
    CXCursor_MemberRef :: 47,
    CXCursor_LabelRef :: 48,
    CXCursor_OverloadedDeclRef :: 49,
    CXCursor_VariableRef :: 50,
    CXCursor_LastRef :: 50,
    CXCursor_FirstInvalid :: 70,
    CXCursor_InvalidFile :: 70,
    CXCursor_NoDeclFound :: 71,
    CXCursor_NotImplemented :: 72,
    CXCursor_InvalidCode :: 73,
    CXCursor_LastInvalid :: 73,
    CXCursor_FirstExpr :: 100,
    CXCursor_UnexposedExpr :: 100,
    CXCursor_DeclRefExpr :: 101,
    CXCursor_MemberRefExpr :: 102,
    CXCursor_CallExpr :: 103,
    CXCursor_ObjCMessageExpr :: 104,
    CXCursor_BlockExpr :: 105,
    CXCursor_IntegerLiteral :: 106,
    CXCursor_FloatingLiteral :: 107,
    CXCursor_ImaginaryLiteral :: 108,
    CXCursor_StringLiteral :: 109,
    CXCursor_CharacterLiteral :: 110,
    CXCursor_ParenExpr :: 111,
    CXCursor_UnaryOperator :: 112,
    CXCursor_ArraySubscriptExpr :: 113,
    CXCursor_BinaryOperator :: 114,
    CXCursor_CompoundAssignOperator :: 115,
    CXCursor_ConditionalOperator :: 116,
    CXCursor_CStyleCastExpr :: 117,
    CXCursor_CompoundLiteralExpr :: 118,
    CXCursor_InitListExpr :: 119,
    CXCursor_AddrLabelExpr :: 120,
    CXCursor_StmtExpr :: 121,
    CXCursor_GenericSelectionExpr :: 122,
    CXCursor_GNUNullExpr :: 123,
    CXCursor_CXXStaticCastExpr :: 124,
    CXCursor_CXXDynamicCastExpr :: 125,
    CXCursor_CXXReinterpretCastExpr :: 126,
    CXCursor_CXXConstCastExpr :: 127,
    CXCursor_CXXFunctionalCastExpr :: 128,
    CXCursor_CXXTypeidExpr :: 129,
    CXCursor_CXXBoolLiteralExpr :: 130,
    CXCursor_CXXNullPtrLiteralExpr :: 131,
    CXCursor_CXXThisExpr :: 132,
    CXCursor_CXXThrowExpr :: 133,
    CXCursor_CXXNewExpr :: 134,
    CXCursor_CXXDeleteExpr :: 135,
    CXCursor_UnaryExpr :: 136,
    CXCursor_ObjCStringLiteral :: 137,
    CXCursor_ObjCEncodeExpr :: 138,
    CXCursor_ObjCSelectorExpr :: 139,
    CXCursor_ObjCProtocolExpr :: 140,
    CXCursor_ObjCBridgedCastExpr :: 141,
    CXCursor_PackExpansionExpr :: 142,
    CXCursor_SizeOfPackExpr :: 143,
    CXCursor_LambdaExpr :: 144,
    CXCursor_ObjCBoolLiteralExpr :: 145,
    CXCursor_ObjCSelfExpr :: 146,
    CXCursor_OMPArraySectionExpr :: 147,
    CXCursor_ObjCAvailabilityCheckExpr :: 148,
    CXCursor_FixedPointLiteral :: 149,
    CXCursor_LastExpr :: 149,
    CXCursor_FirstStmt :: 200,
    CXCursor_UnexposedStmt :: 200,
    CXCursor_LabelStmt :: 201,
    CXCursor_CompoundStmt :: 202,
    CXCursor_CaseStmt :: 203,
    CXCursor_DefaultStmt :: 204,
    CXCursor_IfStmt :: 205,
    CXCursor_SwitchStmt :: 206,
    CXCursor_WhileStmt :: 207,
    CXCursor_DoStmt :: 208,
    CXCursor_ForStmt :: 209,
    CXCursor_GotoStmt :: 210,
    CXCursor_IndirectGotoStmt :: 211,
    CXCursor_ContinueStmt :: 212,
    CXCursor_BreakStmt :: 213,
    CXCursor_ReturnStmt :: 214,
    CXCursor_GCCAsmStmt :: 215,
    CXCursor_AsmStmt :: 215,
    CXCursor_ObjCAtTryStmt :: 216,
    CXCursor_ObjCAtCatchStmt :: 217,
    CXCursor_ObjCAtFinallyStmt :: 218,
    CXCursor_ObjCAtThrowStmt :: 219,
    CXCursor_ObjCAtSynchronizedStmt :: 220,
    CXCursor_ObjCAutoreleasePoolStmt :: 221,
    CXCursor_ObjCForCollectionStmt :: 222,
    CXCursor_CXXCatchStmt :: 223,
    CXCursor_CXXTryStmt :: 224,
    CXCursor_CXXForRangeStmt :: 225,
    CXCursor_SEHTryStmt :: 226,
    CXCursor_SEHExceptStmt :: 227,
    CXCursor_SEHFinallyStmt :: 228,
    CXCursor_MSAsmStmt :: 229,
    CXCursor_NullStmt :: 230,
    CXCursor_DeclStmt :: 231,
    CXCursor_OMPParallelDirective :: 232,
    CXCursor_OMPSimdDirective :: 233,
    CXCursor_OMPForDirective :: 234,
    CXCursor_OMPSectionsDirective :: 235,
    CXCursor_OMPSectionDirective :: 236,
    CXCursor_OMPSingleDirective :: 237,
    CXCursor_OMPParallelForDirective :: 238,
    CXCursor_OMPParallelSectionsDirective :: 239,
    CXCursor_OMPTaskDirective :: 240,
    CXCursor_OMPMasterDirective :: 241,
    CXCursor_OMPCriticalDirective :: 242,
    CXCursor_OMPTaskyieldDirective :: 243,
    CXCursor_OMPBarrierDirective :: 244,
    CXCursor_OMPTaskwaitDirective :: 245,
    CXCursor_OMPFlushDirective :: 246,
    CXCursor_SEHLeaveStmt :: 247,
    CXCursor_OMPOrderedDirective :: 248,
    CXCursor_OMPAtomicDirective :: 249,
    CXCursor_OMPForSimdDirective :: 250,
    CXCursor_OMPParallelForSimdDirective :: 251,
    CXCursor_OMPTargetDirective :: 252,
    CXCursor_OMPTeamsDirective :: 253,
    CXCursor_OMPTaskgroupDirective :: 254,
    CXCursor_OMPCancellationPointDirective :: 255,
    CXCursor_OMPCancelDirective :: 256,
    CXCursor_OMPTargetDataDirective :: 257,
    CXCursor_OMPTaskLoopDirective :: 258,
    CXCursor_OMPTaskLoopSimdDirective :: 259,
    CXCursor_OMPDistributeDirective :: 260,
    CXCursor_OMPTargetEnterDataDirective :: 261,
    CXCursor_OMPTargetExitDataDirective :: 262,
    CXCursor_OMPTargetParallelDirective :: 263,
    CXCursor_OMPTargetParallelForDirective :: 264,
    CXCursor_OMPTargetUpdateDirective :: 265,
    CXCursor_OMPDistributeParallelForDirective :: 266,
    CXCursor_OMPDistributeParallelForSimdDirective :: 267,
    CXCursor_OMPDistributeSimdDirective :: 268,
    CXCursor_OMPTargetParallelForSimdDirective :: 269,
    CXCursor_OMPTargetSimdDirective :: 270,
    CXCursor_OMPTeamsDistributeDirective :: 271,
    CXCursor_OMPTeamsDistributeSimdDirective :: 272,
    CXCursor_OMPTeamsDistributeParallelForSimdDirective :: 273,
    CXCursor_OMPTeamsDistributeParallelForDirective :: 274,
    CXCursor_OMPTargetTeamsDirective :: 275,
    CXCursor_OMPTargetTeamsDistributeDirective :: 276,
    CXCursor_OMPTargetTeamsDistributeParallelForDirective :: 277,
    CXCursor_OMPTargetTeamsDistributeParallelForSimdDirective :: 278,
    CXCursor_OMPTargetTeamsDistributeSimdDirective :: 279,
    CXCursor_BuiltinBitCastExpr :: 280,
    CXCursor_LastStmt :: 280,
    CXCursor_TranslationUnit :: 300,
    CXCursor_FirstAttr :: 400,
    CXCursor_UnexposedAttr :: 400,
    CXCursor_IBActionAttr :: 401,
    CXCursor_IBOutletAttr :: 402,
    CXCursor_IBOutletCollectionAttr :: 403,
    CXCursor_CXXFinalAttr :: 404,
    CXCursor_CXXOverrideAttr :: 405,
    CXCursor_AnnotateAttr :: 406,
    CXCursor_AsmLabelAttr :: 407,
    CXCursor_PackedAttr :: 408,
    CXCursor_PureAttr :: 409,
    CXCursor_ConstAttr :: 410,
    CXCursor_NoDuplicateAttr :: 411,
    CXCursor_CUDAConstantAttr :: 412,
    CXCursor_CUDADeviceAttr :: 413,
    CXCursor_CUDAGlobalAttr :: 414,
    CXCursor_CUDAHostAttr :: 415,
    CXCursor_CUDASharedAttr :: 416,
    CXCursor_VisibilityAttr :: 417,
    CXCursor_DLLExport :: 418,
    CXCursor_DLLImport :: 419,
    CXCursor_NSReturnsRetained :: 420,
    CXCursor_NSReturnsNotRetained :: 421,
    CXCursor_NSReturnsAutoreleased :: 422,
    CXCursor_NSConsumesSelf :: 423,
    CXCursor_NSConsumed :: 424,
    CXCursor_ObjCException :: 425,
    CXCursor_ObjCNSObject :: 426,
    CXCursor_ObjCIndependentClass :: 427,
    CXCursor_ObjCPreciseLifetime :: 428,
    CXCursor_ObjCReturnsInnerPointer :: 429,
    CXCursor_ObjCRequiresSuper :: 430,
    CXCursor_ObjCRootClass :: 431,
    CXCursor_ObjCSubclassingRestricted :: 432,
    CXCursor_ObjCExplicitProtocolImpl :: 433,
    CXCursor_ObjCDesignatedInitializer :: 434,
    CXCursor_ObjCRuntimeVisible :: 435,
    CXCursor_ObjCBoxable :: 436,
    CXCursor_FlagEnum :: 437,
    CXCursor_ConvergentAttr :: 438,
    CXCursor_WarnUnusedAttr :: 439,
    CXCursor_WarnUnusedResultAttr :: 440,
    CXCursor_AlignedAttr :: 441,
    CXCursor_LastAttr :: 441,
    CXCursor_PreprocessingDirective :: 500,
    CXCursor_MacroDefinition :: 501,
    CXCursor_MacroExpansion :: 502,
    CXCursor_MacroInstantiation :: 502,
    CXCursor_InclusionDirective :: 503,
    CXCursor_FirstPreprocessing :: 500,
    CXCursor_LastPreprocessing :: 503,
    CXCursor_ModuleImportDecl :: 600,
    CXCursor_TypeAliasTemplateDecl :: 601,
    CXCursor_StaticAssert :: 602,
    CXCursor_FriendDecl :: 603,
    CXCursor_FirstExtraDecl :: 600,
    CXCursor_LastExtraDecl :: 603,
    CXCursor_OverloadCandidate :: 700,
};
CXCursor :: ;
clang_equalCursors :: fn (_0: CXCursor, _1: CXCursor) s32 #extern;
clang_Cursor_isNull :: fn (cursor: CXCursor) s32 #extern;
clang_hashCursor :: fn (_0: CXCursor) s32 #extern;
clang_getCursorKind :: fn (_0: CXCursor) s32 #extern;
clang_isDeclaration :: fn (_0: ) s32 #extern;
clang_isInvalidDeclaration :: fn (_0: CXCursor) s32 #extern;
clang_isReference :: fn (_0: ) s32 #extern;
clang_isExpression :: fn (_0: ) s32 #extern;
clang_isStatement :: fn (_0: ) s32 #extern;
clang_isAttribute :: fn (_0: ) s32 #extern;
clang_Cursor_hasAttrs :: fn (C: CXCursor) s32 #extern;
clang_isInvalid :: fn (_0: ) s32 #extern;
clang_isTranslationUnit :: fn (_0: ) s32 #extern;
clang_isPreprocessing :: fn (_0: ) s32 #extern;
clang_isUnexposed :: fn (_0: ) s32 #extern;
CXLinkageKind :: enum {
    CXLinkage_Invalid :: 0,
    CXLinkage_NoLinkage :: 1,
    CXLinkage_Internal :: 2,
    CXLinkage_UniqueExternal :: 3,
    CXLinkage_External :: 4,
};
clang_getCursorLinkage :: fn (cursor: CXCursor) s32 #extern;
CXVisibilityKind :: enum {
    CXVisibility_Invalid :: 0,
    CXVisibility_Hidden :: 1,
    CXVisibility_Protected :: 2,
    CXVisibility_Default :: 3,
};
clang_getCursorVisibility :: fn (cursor: CXCursor) s32 #extern;
clang_getCursorAvailability :: fn (cursor: CXCursor) s32 #extern;
CXPlatformAvailability :: ;
clang_getCursorPlatformAvailability :: fn (cursor: CXCursor, always_deprecated: *s32, deprecated_message: *s32, always_unavailable: *s32, unavailable_message: *s32, availability: *CXPlatformAvailability, availability_size: s32) s32 #extern;
clang_disposeCXPlatformAvailability :: fn (availability: *CXPlatformAvailability) s32 #extern;
CXLanguageKind :: enum {
    CXLanguage_Invalid :: 0,
    CXLanguage_C :: 1,
    CXLanguage_ObjC :: 2,
    CXLanguage_CPlusPlus :: 3,
};
clang_getCursorLanguage :: fn (cursor: CXCursor) s32 #extern;
CXTLSKind :: enum {
    CXTLS_None :: 0,
    CXTLS_Dynamic :: 1,
    CXTLS_Static :: 2,
};
clang_getCursorTLSKind :: fn (cursor: CXCursor) s32 #extern;
CXCursorSet :: *;
clang_disposeCXCursorSet :: fn (cset: CXCursorSet) s32 #extern;
clang_CXCursorSet_contains :: fn (cset: CXCursorSet, cursor: CXCursor) s32 #extern;
clang_CXCursorSet_insert :: fn (cset: CXCursorSet, cursor: CXCursor) s32 #extern;
clang_getOverriddenCursors :: fn (cursor: CXCursor, overridden: **CXCursor, num_overridden: *u32) s32 #extern;
clang_disposeOverriddenCursors :: fn (overridden: *CXCursor) s32 #extern;
CXTypeKind :: enum {
    CXType_Invalid :: 0,
    CXType_Unexposed :: 1,
    CXType_Void :: 2,
    CXType_Bool :: 3,
    CXType_Char_U :: 4,
    CXType_UChar :: 5,
    CXType_Char16 :: 6,
    CXType_Char32 :: 7,
    CXType_UShort :: 8,
    CXType_UInt :: 9,
    CXType_ULong :: 10,
    CXType_ULongLong :: 11,
    CXType_UInt128 :: 12,
    CXType_Char_S :: 13,
    CXType_SChar :: 14,
    CXType_WChar :: 15,
    CXType_Short :: 16,
    CXType_Int :: 17,
    CXType_Long :: 18,
    CXType_LongLong :: 19,
    CXType_Int128 :: 20,
    CXType_Float :: 21,
    CXType_Double :: 22,
    CXType_LongDouble :: 23,
    CXType_NullPtr :: 24,
    CXType_Overload :: 25,
    CXType_Dependent :: 26,
    CXType_ObjCId :: 27,
    CXType_ObjCClass :: 28,
    CXType_ObjCSel :: 29,
    CXType_Float128 :: 30,
    CXType_Half :: 31,
    CXType_Float16 :: 32,
    CXType_ShortAccum :: 33,
    CXType_Accum :: 34,
    CXType_LongAccum :: 35,
    CXType_UShortAccum :: 36,
    CXType_UAccum :: 37,
    CXType_ULongAccum :: 38,
    CXType_FirstBuiltin :: 2,
    CXType_LastBuiltin :: 38,
    CXType_Complex :: 100,
    CXType_Pointer :: 101,
    CXType_BlockPointer :: 102,
    CXType_LValueReference :: 103,
    CXType_RValueReference :: 104,
    CXType_Record :: 105,
    CXType_Enum :: 106,
    CXType_Typedef :: 107,
    CXType_ObjCInterface :: 108,
    CXType_ObjCObjectPointer :: 109,
    CXType_FunctionNoProto :: 110,
    CXType_FunctionProto :: 111,
    CXType_ConstantArray :: 112,
    CXType_Vector :: 113,
    CXType_IncompleteArray :: 114,
    CXType_VariableArray :: 115,
    CXType_DependentSizedArray :: 116,
    CXType_MemberPointer :: 117,
    CXType_Auto :: 118,
    CXType_Elaborated :: 119,
    CXType_Pipe :: 120,
    CXType_OCLImage1dRO :: 121,
    CXType_OCLImage1dArrayRO :: 122,
    CXType_OCLImage1dBufferRO :: 123,
    CXType_OCLImage2dRO :: 124,
    CXType_OCLImage2dArrayRO :: 125,
    CXType_OCLImage2dDepthRO :: 126,
    CXType_OCLImage2dArrayDepthRO :: 127,
    CXType_OCLImage2dMSAARO :: 128,
    CXType_OCLImage2dArrayMSAARO :: 129,
    CXType_OCLImage2dMSAADepthRO :: 130,
    CXType_OCLImage2dArrayMSAADepthRO :: 131,
    CXType_OCLImage3dRO :: 132,
    CXType_OCLImage1dWO :: 133,
    CXType_OCLImage1dArrayWO :: 134,
    CXType_OCLImage1dBufferWO :: 135,
    CXType_OCLImage2dWO :: 136,
    CXType_OCLImage2dArrayWO :: 137,
    CXType_OCLImage2dDepthWO :: 138,
    CXType_OCLImage2dArrayDepthWO :: 139,
    CXType_OCLImage2dMSAAWO :: 140,
    CXType_OCLImage2dArrayMSAAWO :: 141,
    CXType_OCLImage2dMSAADepthWO :: 142,
    CXType_OCLImage2dArrayMSAADepthWO :: 143,
    CXType_OCLImage3dWO :: 144,
    CXType_OCLImage1dRW :: 145,
    CXType_OCLImage1dArrayRW :: 146,
    CXType_OCLImage1dBufferRW :: 147,
    CXType_OCLImage2dRW :: 148,
    CXType_OCLImage2dArrayRW :: 149,
    CXType_OCLImage2dDepthRW :: 150,
    CXType_OCLImage2dArrayDepthRW :: 151,
    CXType_OCLImage2dMSAARW :: 152,
    CXType_OCLImage2dArrayMSAARW :: 153,
    CXType_OCLImage2dMSAADepthRW :: 154,
    CXType_OCLImage2dArrayMSAADepthRW :: 155,
    CXType_OCLImage3dRW :: 156,
    CXType_OCLSampler :: 157,
    CXType_OCLEvent :: 158,
    CXType_OCLQueue :: 159,
    CXType_OCLReserveID :: 160,
    CXType_ObjCObject :: 161,
    CXType_ObjCTypeParam :: 162,
    CXType_Attributed :: 163,
    CXType_OCLIntelSubgroupAVCMcePayload :: 164,
    CXType_OCLIntelSubgroupAVCImePayload :: 165,
    CXType_OCLIntelSubgroupAVCRefPayload :: 166,
    CXType_OCLIntelSubgroupAVCSicPayload :: 167,
    CXType_OCLIntelSubgroupAVCMceResult :: 168,
    CXType_OCLIntelSubgroupAVCImeResult :: 169,
    CXType_OCLIntelSubgroupAVCRefResult :: 170,
    CXType_OCLIntelSubgroupAVCSicResult :: 171,
    CXType_OCLIntelSubgroupAVCImeResultSingleRefStreamout :: 172,
    CXType_OCLIntelSubgroupAVCImeResultDualRefStreamout :: 173,
    CXType_OCLIntelSubgroupAVCImeSingleRefStreamin :: 174,
    CXType_OCLIntelSubgroupAVCImeDualRefStreamin :: 175,
    CXType_ExtVector :: 176,
};
CXCallingConv :: enum {
    CXCallingConv_Default :: 0,
    CXCallingConv_C :: 1,
    CXCallingConv_X86StdCall :: 2,
    CXCallingConv_X86FastCall :: 3,
    CXCallingConv_X86ThisCall :: 4,
    CXCallingConv_X86Pascal :: 5,
    CXCallingConv_AAPCS :: 6,
    CXCallingConv_AAPCS_VFP :: 7,
    CXCallingConv_X86RegCall :: 8,
    CXCallingConv_IntelOclBicc :: 9,
    CXCallingConv_Win64 :: 10,
    CXCallingConv_X86_64Win64 :: 10,
    CXCallingConv_X86_64SysV :: 11,
    CXCallingConv_X86VectorCall :: 12,
    CXCallingConv_Swift :: 13,
    CXCallingConv_PreserveMost :: 14,
    CXCallingConv_PreserveAll :: 15,
    CXCallingConv_AArch64VectorCall :: 16,
    CXCallingConv_Invalid :: 100,
    CXCallingConv_Unexposed :: 200,
};
CXType :: ;
clang_getEnumConstantDeclValue :: fn (C: CXCursor) s32 #extern;
clang_getEnumConstantDeclUnsignedValue :: fn (C: CXCursor) s32 #extern;
clang_getFieldDeclBitWidth :: fn (C: CXCursor) s32 #extern;
clang_Cursor_getNumArguments :: fn (C: CXCursor) s32 #extern;
CXTemplateArgumentKind :: enum {
    CXTemplateArgumentKind_Null :: 0,
    CXTemplateArgumentKind_Type :: 1,
    CXTemplateArgumentKind_Declaration :: 2,
    CXTemplateArgumentKind_NullPtr :: 3,
    CXTemplateArgumentKind_Integral :: 4,
    CXTemplateArgumentKind_Template :: 5,
    CXTemplateArgumentKind_TemplateExpansion :: 6,
    CXTemplateArgumentKind_Expression :: 7,
    CXTemplateArgumentKind_Pack :: 8,
    CXTemplateArgumentKind_Invalid :: 9,
};
clang_Cursor_getNumTemplateArguments :: fn (C: CXCursor) s32 #extern;
clang_Cursor_getTemplateArgumentKind :: fn (C: CXCursor, I: u32) s32 #extern;
clang_Cursor_getTemplateArgumentValue :: fn (C: CXCursor, I: u32) s32 #extern;
clang_Cursor_getTemplateArgumentUnsignedValue :: fn (C: CXCursor, I: u32) s32 #extern;
clang_equalTypes :: fn (A: CXType, B: CXType) s32 #extern;
clang_isConstQualifiedType :: fn (T: CXType) s32 #extern;
clang_Cursor_isMacroFunctionLike :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isMacroBuiltin :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isFunctionInlined :: fn (C: CXCursor) s32 #extern;
clang_isVolatileQualifiedType :: fn (T: CXType) s32 #extern;
clang_isRestrictQualifiedType :: fn (T: CXType) s32 #extern;
clang_getAddressSpace :: fn (T: CXType) s32 #extern;
clang_getFunctionTypeCallingConv :: fn (T: CXType) s32 #extern;
clang_getExceptionSpecificationType :: fn (T: CXType) s32 #extern;
clang_getNumArgTypes :: fn (T: CXType) s32 #extern;
clang_Type_getNumObjCProtocolRefs :: fn (T: CXType) s32 #extern;
clang_Type_getNumObjCTypeArgs :: fn (T: CXType) s32 #extern;
clang_isFunctionTypeVariadic :: fn (T: CXType) s32 #extern;
clang_getCursorExceptionSpecificationType :: fn (C: CXCursor) s32 #extern;
clang_isPODType :: fn (T: CXType) s32 #extern;
clang_getNumElements :: fn (T: CXType) s32 #extern;
clang_getArraySize :: fn (T: CXType) s32 #extern;
clang_Type_isTransparentTagTypedef :: fn (T: CXType) s32 #extern;
CXTypeNullabilityKind :: enum {
    CXTypeNullability_NonNull :: 0,
    CXTypeNullability_Nullable :: 1,
    CXTypeNullability_Unspecified :: 2,
    CXTypeNullability_Invalid :: 3,
};
clang_Type_getNullability :: fn (T: CXType) s32 #extern;
CXTypeLayoutError :: enum {
    CXTypeLayoutError_Invalid :: -1,
    CXTypeLayoutError_Incomplete :: -2,
    CXTypeLayoutError_Dependent :: -3,
    CXTypeLayoutError_NotConstantSize :: -4,
    CXTypeLayoutError_InvalidFieldName :: -5,
    CXTypeLayoutError_Undeduced :: -6,
};
clang_Type_getAlignOf :: fn (T: CXType) s32 #extern;
clang_Type_getSizeOf :: fn (T: CXType) s32 #extern;
clang_Type_getOffsetOf :: fn (T: CXType, S: *s8) s32 #extern;
clang_Cursor_getOffsetOfField :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isAnonymous :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isAnonymousRecordDecl :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isInlineNamespace :: fn (C: CXCursor) s32 #extern;
CXRefQualifierKind :: enum {
    CXRefQualifier_None :: 0,
    CXRefQualifier_LValue :: 1,
    CXRefQualifier_RValue :: 2,
};
clang_Type_getNumTemplateArguments :: fn (T: CXType) s32 #extern;
clang_Type_getCXXRefQualifier :: fn (T: CXType) s32 #extern;
clang_Cursor_isBitField :: fn (C: CXCursor) s32 #extern;
clang_isVirtualBase :: fn (_0: CXCursor) s32 #extern;
CX_CXXAccessSpecifier :: enum {
    CX_CXXInvalidAccessSpecifier :: 0,
    CX_CXXPublic :: 1,
    CX_CXXProtected :: 2,
    CX_CXXPrivate :: 3,
};
clang_getCXXAccessSpecifier :: fn (_0: CXCursor) s32 #extern;
CX_StorageClass :: enum {
    CX_SC_Invalid :: 0,
    CX_SC_None :: 1,
    CX_SC_Extern :: 2,
    CX_SC_Static :: 3,
    CX_SC_PrivateExtern :: 4,
    CX_SC_OpenCLWorkGroupLocal :: 5,
    CX_SC_Auto :: 6,
    CX_SC_Register :: 7,
};
clang_Cursor_getStorageClass :: fn (_0: CXCursor) s32 #extern;
clang_getNumOverloadedDecls :: fn (cursor: CXCursor) s32 #extern;
CXChildVisitResult :: enum {
    CXChildVisit_Break :: 0,
    CXChildVisit_Continue :: 1,
    CXChildVisit_Recurse :: 2,
};
CXCursorVisitor :: *fn (<TYPEDEF><INVALID_ARGC>) ;
clang_visitChildren :: fn (parent: CXCursor, visitor: CXCursorVisitor, client_data: CXClientData) s32 #extern;
CXCursorVisitorBlock :: ;
clang_visitChildrenWithBlock :: fn (parent: CXCursor, block: CXCursorVisitorBlock) s32 #extern;
CXPrintingPolicy :: *u8;
CXPrintingPolicyProperty :: enum {
    CXPrintingPolicy_Indentation :: 0,
    CXPrintingPolicy_SuppressSpecifiers :: 1,
    CXPrintingPolicy_SuppressTagKeyword :: 2,
    CXPrintingPolicy_IncludeTagDefinition :: 3,
    CXPrintingPolicy_SuppressScope :: 4,
    CXPrintingPolicy_SuppressUnwrittenScope :: 5,
    CXPrintingPolicy_SuppressInitializers :: 6,
    CXPrintingPolicy_ConstantArraySizeAsWritten :: 7,
    CXPrintingPolicy_AnonymousTagLocations :: 8,
    CXPrintingPolicy_SuppressStrongLifetime :: 9,
    CXPrintingPolicy_SuppressLifetimeQualifiers :: 10,
    CXPrintingPolicy_SuppressTemplateArgsInCXXConstructors :: 11,
    CXPrintingPolicy_Bool :: 12,
    CXPrintingPolicy_Restrict :: 13,
    CXPrintingPolicy_Alignof :: 14,
    CXPrintingPolicy_UnderscoreAlignof :: 15,
    CXPrintingPolicy_UseVoidForZeroParams :: 16,
    CXPrintingPolicy_TerseOutput :: 17,
    CXPrintingPolicy_PolishForDeclaration :: 18,
    CXPrintingPolicy_Half :: 19,
    CXPrintingPolicy_MSWChar :: 20,
    CXPrintingPolicy_IncludeNewlines :: 21,
    CXPrintingPolicy_MSVCFormatting :: 22,
    CXPrintingPolicy_ConstantsAsWritten :: 23,
    CXPrintingPolicy_SuppressImplicitBase :: 24,
    CXPrintingPolicy_FullyQualifiedName :: 25,
    CXPrintingPolicy_LastProperty :: 25,
};
clang_PrintingPolicy_getProperty :: fn (Policy: CXPrintingPolicy, Property: ) s32 #extern;
clang_PrintingPolicy_setProperty :: fn (Policy: CXPrintingPolicy, Property: , Value: u32) s32 #extern;
clang_PrintingPolicy_dispose :: fn (Policy: CXPrintingPolicy) s32 #extern;
clang_isCursorDefinition :: fn (_0: CXCursor) s32 #extern;
clang_Cursor_getObjCSelectorIndex :: fn (_0: CXCursor) s32 #extern;
clang_Cursor_isDynamicCall :: fn (C: CXCursor) s32 #extern;
CXObjCPropertyAttrKind :: ;
clang_Cursor_getObjCPropertyAttributes :: fn (C: CXCursor, reserved: u32) s32 #extern;
CXObjCDeclQualifierKind :: ;
clang_Cursor_getObjCDeclQualifiers :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isObjCOptional :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isVariadic :: fn (C: CXCursor) s32 #extern;
clang_Cursor_isExternalSymbol :: fn (C: CXCursor, language: *s32, definedIn: *s32, isGenerated: *u32) s32 #extern;
CXModule :: *u8;
clang_Module_isSystem :: fn (Module: CXModule) s32 #extern;
clang_Module_getNumTopLevelHeaders :: fn (_0: CXTranslationUnit, Module: CXModule) s32 #extern;
clang_CXXConstructor_isConvertingConstructor :: fn (C: CXCursor) s32 #extern;
clang_CXXConstructor_isCopyConstructor :: fn (C: CXCursor) s32 #extern;
clang_CXXConstructor_isDefaultConstructor :: fn (C: CXCursor) s32 #extern;
clang_CXXConstructor_isMoveConstructor :: fn (C: CXCursor) s32 #extern;
clang_CXXField_isMutable :: fn (C: CXCursor) s32 #extern;
clang_CXXMethod_isDefaulted :: fn (C: CXCursor) s32 #extern;
clang_CXXMethod_isPureVirtual :: fn (C: CXCursor) s32 #extern;
clang_CXXMethod_isStatic :: fn (C: CXCursor) s32 #extern;
clang_CXXMethod_isVirtual :: fn (C: CXCursor) s32 #extern;
clang_CXXRecord_isAbstract :: fn (C: CXCursor) s32 #extern;
clang_EnumDecl_isScoped :: fn (C: CXCursor) s32 #extern;
clang_CXXMethod_isConst :: fn (C: CXCursor) s32 #extern;
clang_getTemplateCursorKind :: fn (C: CXCursor) s32 #extern;
CXNameRefFlags :: enum {
    CXNameRange_WantQualifier :: 1,
    CXNameRange_WantTemplateArgs :: 2,
    CXNameRange_WantSinglePiece :: 4,
};
CXTokenKind :: enum {
    CXToken_Punctuation :: 0,
    CXToken_Keyword :: 1,
    CXToken_Identifier :: 2,
    CXToken_Literal :: 3,
    CXToken_Comment :: 4,
};
CXToken :: ;
clang_tokenize :: fn (TU: CXTranslationUnit, Range: CXSourceRange, Tokens: **CXToken, NumTokens: *u32) s32 #extern;
clang_annotateTokens :: fn (TU: CXTranslationUnit, Tokens: *CXToken, NumTokens: u32, Cursors: *CXCursor) s32 #extern;
clang_disposeTokens :: fn (TU: CXTranslationUnit, Tokens: *CXToken, NumTokens: u32) s32 #extern;
clang_getDefinitionSpellingAndExtent :: fn (_0: CXCursor, startBuf: **s8, endBuf: **s8, startLine: *u32, startColumn: *u32, endLine: *u32, endColumn: *u32) s32 #extern;
clang_enableStackTraces :: fn () s32 #extern;
clang_executeOnThread :: fn (fn: *fn (<INVALID_ARGC>)  #extern, user_data: *u8, stack_size: u32) s32 #extern;
CXCompletionString :: *u8;
CXCompletionResult :: ;
CXCompletionChunkKind :: enum {
    CXCompletionChunk_Optional :: 0,
    CXCompletionChunk_TypedText :: 1,
    CXCompletionChunk_Text :: 2,
    CXCompletionChunk_Placeholder :: 3,
    CXCompletionChunk_Informative :: 4,
    CXCompletionChunk_CurrentParameter :: 5,
    CXCompletionChunk_LeftParen :: 6,
    CXCompletionChunk_RightParen :: 7,
    CXCompletionChunk_LeftBracket :: 8,
    CXCompletionChunk_RightBracket :: 9,
    CXCompletionChunk_LeftBrace :: 10,
    CXCompletionChunk_RightBrace :: 11,
    CXCompletionChunk_LeftAngle :: 12,
    CXCompletionChunk_RightAngle :: 13,
    CXCompletionChunk_Comma :: 14,
    CXCompletionChunk_ResultType :: 15,
    CXCompletionChunk_Colon :: 16,
    CXCompletionChunk_SemiColon :: 17,
    CXCompletionChunk_Equal :: 18,
    CXCompletionChunk_HorizontalSpace :: 19,
    CXCompletionChunk_VerticalSpace :: 20,
};
clang_getCompletionChunkKind :: fn (completion_string: CXCompletionString, chunk_number: u32) s32 #extern;
clang_getNumCompletionChunks :: fn (completion_string: CXCompletionString) s32 #extern;
clang_getCompletionPriority :: fn (completion_string: CXCompletionString) s32 #extern;
clang_getCompletionAvailability :: fn (completion_string: CXCompletionString) s32 #extern;
clang_getCompletionNumAnnotations :: fn (completion_string: CXCompletionString) s32 #extern;
CXCodeCompleteResults :: ;
clang_getCompletionNumFixIts :: fn (results: *CXCodeCompleteResults, completion_index: u32) s32 #extern;
CXCodeComplete_Flags :: enum {
    CXCodeComplete_IncludeMacros :: 1,
    CXCodeComplete_IncludeCodePatterns :: 2,
    CXCodeComplete_IncludeBriefComments :: 4,
    CXCodeComplete_SkipPreamble :: 8,
    CXCodeComplete_IncludeCompletionsWithFixIts :: 16,
};
CXCompletionContext :: enum {
    CXCompletionContext_Unexposed :: 0,
    CXCompletionContext_AnyType :: 1,
    CXCompletionContext_AnyValue :: 2,
    CXCompletionContext_ObjCObjectValue :: 4,
    CXCompletionContext_ObjCSelectorValue :: 8,
    CXCompletionContext_CXXClassTypeValue :: 16,
    CXCompletionContext_DotMemberAccess :: 32,
    CXCompletionContext_ArrowMemberAccess :: 64,
    CXCompletionContext_ObjCPropertyAccess :: 128,
    CXCompletionContext_EnumTag :: 256,
    CXCompletionContext_UnionTag :: 512,
    CXCompletionContext_StructTag :: 1024,
    CXCompletionContext_ClassTag :: 2048,
    CXCompletionContext_Namespace :: 4096,
    CXCompletionContext_NestedNameSpecifier :: 8192,
    CXCompletionContext_ObjCInterface :: 16384,
    CXCompletionContext_ObjCProtocol :: 32768,
    CXCompletionContext_ObjCCategory :: 65536,
    CXCompletionContext_ObjCInstanceMessage :: 131072,
    CXCompletionContext_ObjCClassMessage :: 262144,
    CXCompletionContext_ObjCSelectorName :: 524288,
    CXCompletionContext_MacroName :: 1048576,
    CXCompletionContext_NaturalLanguage :: 2097152,
    CXCompletionContext_IncludedFile :: 4194304,
    CXCompletionContext_Unknown :: 8388607,
};
clang_defaultCodeCompleteOptions :: fn () s32 #extern;
clang_sortCodeCompletionResults :: fn (Results: *CXCompletionResult, NumResults: u32) s32 #extern;
clang_disposeCodeCompleteResults :: fn (Results: *CXCodeCompleteResults) s32 #extern;
clang_codeCompleteGetNumDiagnostics :: fn (Results: *CXCodeCompleteResults) s32 #extern;
clang_codeCompleteGetContexts :: fn (Results: *CXCodeCompleteResults) s32 #extern;
clang_codeCompleteGetContainerKind :: fn (Results: *CXCodeCompleteResults, IsIncomplete: *u32) s32 #extern;
clang_toggleCrashRecovery :: fn (isEnabled: u32) s32 #extern;
CXInclusionVisitor :: *fn (<TYPEDEF><INVALID_ARGC>) ;
clang_getInclusions :: fn (tu: CXTranslationUnit, visitor: CXInclusionVisitor, client_data: CXClientData) s32 #extern;
CXEvalResultKind :: ;
CXEvalResult :: *u8;
clang_EvalResult_getAsInt :: fn (E: CXEvalResult) s32 #extern;
clang_EvalResult_getAsLongLong :: fn (E: CXEvalResult) s32 #extern;
clang_EvalResult_isUnsignedInt :: fn (E: CXEvalResult) s32 #extern;
clang_EvalResult_getAsUnsigned :: fn (E: CXEvalResult) s32 #extern;
clang_EvalResult_getAsDouble :: fn (E: CXEvalResult) s32 #extern;
clang_EvalResult_getAsStr :: fn (E: CXEvalResult) *s32 #extern;
clang_EvalResult_dispose :: fn (E: CXEvalResult) s32 #extern;
CXRemapping :: *u8;
clang_remap_getNumFiles :: fn (_0: CXRemapping) s32 #extern;
clang_remap_getFilenames :: fn (_0: CXRemapping, index: u32, original: *s32, transformed: *s32) s32 #extern;
clang_remap_dispose :: fn (_0: CXRemapping) s32 #extern;
CXVisitorResult :: enum {
    CXVisit_Break :: 0,
    CXVisit_Continue :: 1,
};
CXCursorAndRangeVisitor :: ;
CXResult :: ;
CXCursorAndRangeVisitorBlock :: ;
CXIdxClientFile :: *u8;
CXIdxClientEntity :: *u8;
CXIdxClientContainer :: *u8;
CXIdxClientASTFile :: *u8;
CXIdxLoc :: ;
CXIdxIncludedFileInfo :: ;
CXIdxImportedASTFileInfo :: ;
CXIdxEntityKind :: ;
CXIdxEntityLanguage :: ;
CXIdxEntityCXXTemplateKind :: ;
CXIdxAttrKind :: ;
CXIdxAttrInfo :: ;
CXIdxEntityInfo :: ;
CXIdxContainerInfo :: ;
CXIdxIBOutletCollectionAttrInfo :: ;
CXIdxDeclInfoFlags :: ;
CXIdxDeclInfo :: ;
CXIdxObjCContainerKind :: ;
CXIdxObjCContainerDeclInfo :: ;
CXIdxBaseClassInfo :: ;
CXIdxObjCProtocolRefInfo :: ;
CXIdxObjCProtocolRefListInfo :: ;
CXIdxObjCInterfaceDeclInfo :: ;
CXIdxObjCCategoryDeclInfo :: ;
CXIdxObjCPropertyDeclInfo :: ;
CXIdxCXXClassDeclInfo :: ;
CXIdxEntityRefKind :: ;
CXSymbolRole :: ;
CXIdxEntityRefInfo :: ;
IndexerCallbacks :: ;
clang_index_isEntityObjCContainerKind :: fn (_0: CXIdxEntityKind) s32 #extern;
clang_index_setClientContainer :: fn (_0: *CXIdxContainerInfo, _1: CXIdxClientContainer) s32 #extern;
clang_index_setClientEntity :: fn (_0: *CXIdxEntityInfo, _1: CXIdxClientEntity) s32 #extern;
CXIndexAction :: *u8;
clang_IndexAction_dispose :: fn (_0: CXIndexAction) s32 #extern;
CXIndexOptFlags :: ;
clang_indexSourceFile :: fn (_0: CXIndexAction, client_data: CXClientData, index_callbacks: *IndexerCallbacks, index_callbacks_size: u32, index_options: u32, source_filename: *s8, command_line_args: **s8, num_command_line_args: s32, unsaved_files: *, num_unsaved_files: u32, out_TU: *CXTranslationUnit, TU_options: u32) s32 #extern;
clang_indexSourceFileFullArgv :: fn (_0: CXIndexAction, client_data: CXClientData, index_callbacks: *IndexerCallbacks, index_callbacks_size: u32, index_options: u32, source_filename: *s8, command_line_args: **s8, num_command_line_args: s32, unsaved_files: *, num_unsaved_files: u32, out_TU: *CXTranslationUnit, TU_options: u32) s32 #extern;
clang_indexTranslationUnit :: fn (_0: CXIndexAction, client_data: CXClientData, index_callbacks: *IndexerCallbacks, index_callbacks_size: u32, index_options: u32, _5: CXTranslationUnit) s32 #extern;
clang_indexLoc_getFileLocation :: fn (loc: CXIdxLoc, indexFile: *CXIdxClientFile, file: *CXFile, line: *u32, column: *u32, offset: *u32) s32 #extern;
CXFieldVisitor :: *fn (<TYPEDEF><INVALID_ARGC>) ;
clang_Type_visitFields :: fn (T: CXType, visitor: CXFieldVisitor, client_data: CXClientData) s32 #extern;
