//! =====
//! Array
//! =====
//! 
//! ::
//! 
//!     #import "std/array"
//! 
//! ::
//! 
//!     _Array :: struct #compiler {
//!         len: s64;
//!         ptr: *u8;
//!         allocated: usize;
//!         allocator: AllocFn;
//!     }
//! 
//! Compiler builtin dynamic array.

// @NOTE: Not direcly used internally, when layout of this structure is changed, internal
// compiler representation must be modified too.
_Array :: struct #compiler {
    len: s64;
    ptr: *u8;
    allocated: usize;
    allocator: AllocFn;
}

/// Sets dynamic array to default state. If array contains already allocated memory 
/// `array_terminate` must be called first. Custom `allocator` can be specified.
array_init :: fn (_arr: Any, allocator: AllocFn = null) #inline #compiler {
    arr := cast(*_Array) _arr.data;
    arr.ptr = null;
    arr.len = 0;
    arr.allocated = 0;
    arr.allocator = allocator;
}

/// Release memory allocated by dynamic array. This function is supposed to
/// be called when dynamic array is no longer needed. Passed dynamic array is set to 
/// default state also.
array_terminate :: fn (_arr: Any) #inline #compiler {
    arr := cast(*_Array) _arr.data;
    if arr.allocator {
        arr.allocator(AllocOp.Free, 0, arr.ptr, #file, #line);
    } else {
        free(arr.ptr);
    }
    arr.ptr = null;
    arr.len = 0;
    arr.allocated = 0;
}

/// Append new value at the dynamic array end. New heap allocation is done
/// here only in cases when there is not enough memory allocated to store all 
/// values.
array_push :: fn (_arr: Any, v: Any) #compiler {
    arr := cast(*_Array) _arr.data;
    if v.data == null { panic("Invalid value (null)."); }

    elem_size :: v.type_info.size_bytes;

    arr.len += 1;
    ensure_space(arr, elem_size, auto arr.len, false);

    dest :: get_elem_ptr(arr, elem_size, arr.len - 1);
    memcpy(dest, v.data, elem_size);
};

/// Reserve heap memory for `n` elements in array.
array_reserve :: fn (_arr: Any, n: s64) #compiler {
    arr := cast(*_Array) _arr.data;
    if n == 0 { return; }
    elem_size :: get_elem_size(_arr.type_info);
    ensure_space(arr, elem_size, auto n, true);
};

/// Erase element on index `i`. Call to this function can cause reordering
/// of an dynamic array. Allocated memory is kept even if we erase entire dynamic array. 
/// Function invoke panic in case of index overflow.
array_erase :: fn (_arr: Any, i: s64) #compiler {
    arr := cast(*_Array) _arr.data;
    if i >= arr.len { panic("Index overflow!"); }
    if i == arr.len - 1 { 
        arr.len -= 1; 
        return;
    }

    elem_size :: get_elem_size(_arr.type_info);

    memcpy(
            get_elem_ptr(arr, elem_size, i), 
            get_elem_ptr(arr, elem_size, arr.len - 1), 
            elem_size
    );

    arr.len -= 1;
};

/// Erase all elements in dynamic array but keep allocated memory.
array_clear :: fn (_arr: Any) #inline #compiler {
    arr := cast(*_Array) _arr.data;
    arr.len = 0;
};

#private
ALLOC_BLOCK_SIZE : usize : 32;

get_elem_size :: fn (T: *TypeInfo) usize #inline {
    a :: cast(*TypeInfoStruct) T;
    elem_type :: a.members[1].base_type;
    return (cast(*TypeInfoPtr) elem_type).pointee_type.size_bytes;
}

get_elem_ptr :: fn (arr: *_Array, elem_size: usize, i: s64) *u8 #inline {
    if i >= arr.len {
        panic("Element index out of range, index is % but array size is %.", i, arr.len);
    }

    return ptr_shift_bytes(arr.ptr, i * cast(s64) elem_size);
};

ensure_space :: fn (arr: *_Array, elem_size: usize, space: usize, exact: bool) {
    if space == 0 { return; }
    if arr.allocated >= space { return; }

    if arr.allocated == 0 {
        if !exact { space = ALLOC_BLOCK_SIZE; }
    } else {
        space *= 2;
    }

    tmp := arr.ptr;

    if arr.allocator {
        arr.ptr = arr.allocator(AllocOp.Allocate, space * elem_size, null, #file, #line);
    } else {
        arr.ptr = alloc(space * elem_size); 
    }
    if tmp != null {
        memcpy(arr.ptr, tmp, arr.allocated * elem_size);
        if arr.allocator {
            arr.allocator(AllocOp.Free, 0, tmp, #file, #line);
        } else {
            free(tmp);
        }
    }
    
    arr.allocated = space;
};
