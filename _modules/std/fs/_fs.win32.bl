#load "fs.bl"

/// File handle type.
_FSImplFile :: *u8;
_FS_IMPL_FILE_INVALID : _FSImplFile : null;

_fs_impl_exist :: fn (filepath: string) bool #inline {
    if filepath.len == 0 { return false; }
    return _PathFileExistsA(auto filepath.ptr) > 0;
}

_fs_impl_open :: fn (filepath: string, mode: ...FSOpenMode) (FSFile, Error) {
    if string_is_empty(filepath) { return null, error(ERR_INVALID_HANDLE, "File path is empty!"); }
    access, create, append :: modes_to_flags(mode);
    handle :: _CreateFile(auto filepath.ptr, access, 0, null, create, _FILE_ATTRIBUTE_NORMAL, null);
    if handle == _INVALID_HANDLE_VALUE {
        ec, estr :: os_get_last_error();
        return null, error(ec, "Cannot open file '%': %.", filepath, estr);
    }
    write :: is_flag(access, _GENERIC_WRITE);
    if write && !append {
        _SetEndOfFile(handle);
    } else if write {
        _SetFilePointer(handle, 0, null, _FILE_END);
    }
    return handle, ok();
}

_fs_impl_remove :: fn (filepath: string) Error #inline {
    if string_is_empty(filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    tmp :: _DeleteFileA(auto filepath.ptr);
    if tmp == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot remove file '%': %.", filepath, estr);
    }
    return ok();
}

_fs_impl_copy :: fn (src: string, dest: string, override: bool) Error {
    if string_is_empty(src) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    if string_is_empty(dest) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    fail_if_exist := 1;
    if  override { fail_if_exist = 0; }
    if _CopyFileA(auto src.ptr, auto dest.ptr, fail_if_exist) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot copy file '%' to '%': %.", src, dest, estr);
    }
    return ok();
}

_fs_impl_close :: fn (handle: FSFile) #inline {
    if !handle { return; }
    _CloseHandle(handle);
}

_fs_impl_get_uid :: fn (handle: FSFile) (u64, Error) {
    tmp: _BY_HANDLE_FILE_INFORMATION;
    if _GetFileInformationByHandle(auto handle, &tmp) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot get file information.", estr);
    }
    uid :: ((cast(u64) tmp.nFileIndexHigh) << 32) + (cast(u64) tmp.nFileIndexLow);
    return uid, ok();
}

_fs_impl_get_uid_by_name :: fn (filepath: string) (u64, Error) {
    file, err1 :: fs_open(filepath);
    defer fs_close(file);
    if !is_ok(err1) { return 0, err1; }
    return _fs_impl_get_uid(file);
}

_fs_impl_size :: fn (handle: FSFile) (usize, Error) #inline {
    size: _LARGE_INTEGER #noinit;
    if _GetFileSizeEx(auto handle, &size) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot get file size: %.", estr);
    }
    return auto size, ok();
}

_fs_impl_read :: fn (handle: FSFile, dest: *u8, size: s64) (s64, Error) {
    if !dest { return 0, error(ERR_INVALID_HANDLE, "Cannot read, destination is invalid."); }
    read_bytes: _DWORD #noinit;
    if _ReadFile(handle, dest, auto size, &read_bytes, null) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot read file: %", estr);
    }
    return auto read_bytes, ok();
}

_fs_impl_write :: fn (handle: FSFile, src: *u8, size: s64) (s64, Error) {
    if !src { return 0, error(ERR_INVALID_HANDLE, "Cannot write, source is invalid."); }
    written_bytes: _DWORD #noinit;
    if _WriteFile(handle, src, auto size, &written_bytes, null) == 0 {
        ec, estr :: os_get_last_error();
        return 0, error(ec, "Cannot write to file: %.", estr);
    }
    return auto written_bytes, ok();
}

_fs_impl_dir_create :: fn (dirpath: string) Error {
    if string_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot create directory, dirpath is empty."); }
    if _CreateDirectoryA(auto dirpath.ptr, null) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot create directory '%': %.", dirpath, estr);
    }
    return ok();
}

_fs_impl_dir_remove :: fn (dirpath: string) Error {
    if string_is_empty(dirpath) { return error(ERR_INVALID_HANDLE, "Cannot remove directory, dirpath is empty."); }
    if _RemoveDirectoryA(auto dirpath.ptr) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot remove directory '%': %.", dirpath, estr);
    }
    return ok();
}

_fs_impl_is_directory :: fn (path: string) (bool, Error) #inline {
    if string_is_empty(path) { return false, error(ERR_INVALID_HANDLE, "Path is empty."); }
    attributes :: _GetFileAttributesA(auto path.ptr);
    if attributes == _INVALID_FILE_ATTRIBUTES {
        ec, estr :: os_get_last_error();
        return false, error(ec, "Cannot check directory '%': %.", path, estr);
    }
    return is_flag(attributes, auto _FILE_ATTRIBUTE_DIRECTORY), ok();
}

_fs_impl_dir_scan :: fn (dirpath: string, filter: FSDirScanFilterFn) (FSInfoList, Error) {
    invalid: FSInfoList;
    if dirpath.len > (_MAX_PATH-3) { return invalid, error("Path too long!"); }
    tmp := string_new(dirpath);
    defer string_delete(tmp);
    string_append(&tmp, "\\*");

    ffd: _FIND_DATA;
    h_find := _FindFirstFile(auto tmp.ptr, &ffd);
    if h_find == _INVALID_HANDLE_VALUE {
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }

    fc := 0;
    loop {
        fc += 1;
        if _FindNextFile(h_find, &ffd) == 0 { break; }
    }

    if _FindClose(h_find) == 0 {
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }
    buf: FSInfoList;
    slice_init(buf, fc);
    if fc == 0 { return buf, ok(); }

    h_find = _FindFirstFile(auto tmp.ptr, &ffd);
    if h_find == _INVALID_HANDLE_VALUE { 
        slice_terminate(buf);
        ec, estr :: os_get_last_error();
        return invalid, error(ec, "Cannot list directory '%': %.", dirpath, estr);
    }
    defer _FindClose(h_find);

    buf.len = 0;
    loop {
        kind: FSInfoKind #noinit;
        name: string;
        if is_flag(ffd.dwFileAttributes, auto _FILE_ATTRIBUTE_DIRECTORY) {
            kind = FSInfoKind.Directory;
            name = string_new(ffd.cFileName.ptr);
        } else {
            kind = FSInfoKind.File;
            name = string_new(ffd.cFileName.ptr);
        }
        push := true;
        info :: {:FSInfo: kind, name};
        if filter { push = filter(&info); }
        if push {
            buf.len += 1;
            buf[buf.len-1] = info;
        } else {
            string_delete(name);
        }
        if _FindNextFile(h_find, &ffd) == 0 { break; }
    }
    return buf, ok();
}

_fs_impl_validate_filename :: fn (name: string) bool {
    if name.len == 0 { return false; }
    invalid :: "<>:\"/\\|?*\t";
    loop i := 0; i < invalid.len; i += 1 {
        if string_count(name, invalid[i]) > 0 { return false; }
    }
    return true;
}

_fs_impl_get_cwd :: fn () string #inline {
    buf: [OS_PATH_MAX]u8;
    written :: _GetCurrentDirectoryA(auto buf.len, auto buf.ptr);
    if written == 0 { return string_new(); }
    out :: string_new(buf.ptr);
    string_replace_all(&out, '\\', '/');
    return remove_last_separator(out);
}

_fs_impl_set_cwd :: fn (path: string) Error #inline {
    if string_is_empty(path) { return error(ERR_INVALID_HANDLE, "Path is empty!"); }
    if _SetCurrentDirectoryA(auto path.ptr) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot set current directory to '%': %.", path, estr);
    }
    return ok();
}

_fs_impl_get_home :: fn () string #inline {
    tmp :: "USERPROFILE";
    cdir :: cast(*u8) c_getenv(auto tmp.ptr);
    if !cdir { return string_new(); }
    out :: string_new(cdir);
    string_replace_all(&out, '\\', '/');
    return remove_last_separator(out);
}

_fs_impl_get_tmp :: fn () string #inline {
    buf: [OS_PATH_MAX]u8;
    written :: _GetTempPathA(auto buf.len, auto buf.ptr);
    if written == 0 { return string_new(); }
    out :: string_new(buf.ptr);
    string_replace_all(&out, '\\', '/');
    return remove_last_separator(out);
}

_fs_impl_normalize :: fn (filepath: *string) Error {
    if !filepath { return error(ERR_INVALID_HANDLE, "File path is null!"); }
    if string_is_empty(^filepath) { return error(ERR_INVALID_HANDLE, "File path is empty!"); }
    buf : [OS_PATH_MAX]u8 #noinit;
    if _GetFullPathNameA(auto filepath.ptr, auto buf.len, buf.ptr, null) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot normalize '%': %.", filepath, estr);
    }
    if _PathFileExistsA(auto filepath.ptr) == 0 {
        ec, estr :: os_get_last_error();
        return error(ec, "Cannot normalize '%': %.", filepath, estr);
    }
    string_clear(filepath);
    string_append(filepath, cstr_to_str(buf.ptr));
    string_replace_all(filepath, '\\', '/');
    return ok();
}

_fs_impl_remove_extension :: fn (filename: string) string #inline {
    if string_is_empty(filename) { return string_empty; }
    tmp := filename;
    tmp.len = 0;
    loop i := 0; i < filename.len; i += 1 {
        c :: filename[i];
        if c == '.' && i > 0 { break; }
        tmp.len += 1;
    }
    return tmp;
}

_fs_impl_get_extension :: fn (filename: string) string #inline {
    if string_is_empty(filename) { return string_empty; }
    if filename[0] == '.' {
        if filename.len == 1 { return string_empty; }
        filename.ptr = &filename[1]; 
        filename.len -= 1; 
    }
    rhs: string;
    if string_split_by_first(filename, '.', null, &rhs) {
        return rhs;
    }
    return string_empty;
}

#private
modes_to_flags :: fn (modes: []FSOpenMode) (access: u32, create: u32, append: bool) #inline {
    access: u32;
    create: u32;
    append: bool;
    loop i := 0; i < modes.len; i += 1 {
        switch modes[i] {
            FSOpenMode.Read    { access = access | _GENERIC_READ;  }            
            FSOpenMode.Write   { access = access | _GENERIC_WRITE; }
            FSOpenMode.Append  { access = access | _GENERIC_WRITE; append = true; }
            FSOpenMode.Create  { create = _OPEN_ALWAYS; }
            default { panic(); }
        }
    }
    if access == 0 { access = _GENERIC_READ; }
    if create == 0 { create = _OPEN_EXISTING; }
    return access, create, append;
}

remove_last_separator :: fn (path: string) string {
    if string_is_empty(path) { return path; }
    if path[path.len-1] == '/' {
        path[path.len-1] = '\0';
        path.len -= 1;
    }
    return path;
}