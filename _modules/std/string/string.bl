#import "std/print"
#load "std/libc.bl"

//! ======
//! String
//! ======
//! 
//! ::
//! 
//!     #import "std/string"
//! 
//! :: 
//! 
//!     string :: struct {
//!         len: s64;
//!         ptr: *u8;
//!     }
//! 
//! Builtin string storage. `string` type could represent dynamic and compile time static strings. 
//! 
//! ::
//! 
//!     // Compile-time string literal
//!     my_string :: "This is my string!"; 
//! 
//! :: 
//! 
//!     // Dynamic string allocated on heap.
//!     // New dynamic string can be created from string literal. 
//!     my_string :: string_new("This is my string!");
//!     defer string_delete(my_string);
//! 
//! BL strings are zero terminated except of sub-string view function (terminator cannot be added 
//! because we cannot modify original string).
//! 
//! .. note:: String manipulation functions are related only to dynamic strings and cannot be used with
//!           string literals since those are constants allocated on stack.

/// Overloaded function creating new dynamic string instance. Created string is 
/// guaranteed to be zero terminated.
/// 
/// .. warning:: Every new string must be deleted by :ref:`string_delete` call.
/// 
/// ::
/// 
///     fn () string
/// 
/// Create new empty string object.
/// 
/// ----
/// 
/// ::
/// 
///     fn (size: usize) string
/// 
/// Create new string with preallocated space. This type of string
/// initialization can reduce count of allocations made later by extending
/// string content. String with length up to `size` require only one memory
/// allocation.
/// 
/// .. hint:: This initialization should be preferred if string length can be predicted.
/// 
/// Example
/// -------
/// 
/// .. literalinclude:: /examples/docs/009.bl
///    :language: bl
/// 
/// ----
/// 
/// :: 
/// 
///     fn (v: string) string
/// 
/// Create copy of `v` string. Allocates memory to hold exactly size of `v` string data.
/// 
/// ----
/// 
/// ::
/// 
///     fn (cstr: *u8) string
/// 
/// Create copy of C zero terminated string.
string_new :: fn {
    new;
    new_reserved;
    new_copy;
    new_cstr;
}

/// Delete dynamic string.
string_delete :: fn (v: string) {
    if !v.ptr { return; }
    free_block(v.ptr);
};

/// Clear dynamic string but keep allocated storage.
string_clear :: fn (v: *string) {
    v.len = 0;
    set_terminator(^v);
};

/// Append dynamic string with any value. Allocation is done in case there
/// is not enough space reminding in string.
string_append :: fn (v: *string, add: Any) {
    new_len: s64;
    add_len: s64;
    add_ptr: *u8;

    if add.type_info.kind == TypeKind.String {
        str := ^ cast(*string) add.data;
        new_len = v.len + str.len;
        add_ptr = str.ptr;
        add_len = str.len;
    } else {
        // other values than string
        buf := {:[PRINT_MAX_LENGTH]u8: 0};
        tmp := {:[]u8: buf.len, buf.ptr };

        bprint(tmp, "%", add);
        add_len = auto c_strlen(auto buf.ptr);
        add_ptr = buf.ptr;
        new_len = v.len + add_len;
    }

    v.ptr = make_more_room_if_needed(v.ptr, auto new_len);
    memcpy(cast(*u8) (cast(u64) v.ptr + auto v.len) , add_ptr, auto add_len);
    v.len = new_len;

    set_terminator(^v);
}

/// Append string with multiple values passed as `args` and return `^v`.
string_concatenate :: fn (v: *string, args: ...) string {
    loop i := 0; i < args.len; i += 1 {
        string_append(v, args[i]);
    }
    return ^v;
}

/// Clear string, append with multiple values passed as `args` and return `^v`.
string_clear_concat :: fn (v: *string, args: ...) string {
    string_clear(v);
    loop i := 0; i < args.len; i += 1 {
        string_append(v, args[i]);
    }
    return ^v;
}

/// Compare `first` and `second` strings in specified range `n` and return `true` if they are same 
/// otherwise return `false`.
///
/// Range value `n` is optional and ignored when it's less than 0.
string_compare :: fn (first: string, second: string, n := -1) bool {
    // @CLEANUP: simplify this
    range := n;
    if range < 0 { 
        if first.len != second.len { return false; }
        range = auto max(first.len, second.len); 
    } else if first.len != second.len {
        if first.len < range { return false; }
        if second.len < range { return false; }
    }
    loop i := 0; i < range && i < first.len && i < second.len; i += 1 {
        if first[i] != second[i] { return false; }
    }
    return true;
}

// @DOC
// @TEST
string_compare2 :: fn (first: string, second: string, n := -1) s32 {
    len :: max(first.len, second.len);
    loop i := 0; i < len; i += 1 {
        f: u8; s: u8;
        if i < first.len  { f = first[i]; }
        if i < second.len { s = second[i]; }
        diff :: s - f;
        if diff != 0 { return auto diff; }
    }
    return 0;
}

/// Convert first `count` characters of `str` to `f32`.
string_to_f32 :: fn (str: string, count := -1) f32 {
    if count < 0 { count = auto str.len; }
    else if count > str.len { count = auto str.len; }
    n := 0;
    e := 1;
    is_negative := false;
    is_after_comma := false;

    loop count > 0 {
        c :: str[0];
        if c == '-' {
            is_negative = true;
        } else if c == '.' {
            if is_after_comma { break; }
            is_after_comma = true;
        } else if c >= '0' && c <= '9' {
            n = n * 10 + (auto c - '0');
            if is_after_comma {
                e *= 10;
            }
        } else {
            break;
        }

        consume_char(&str);
        count -= 1;
    }

    v := cast(f32) n / cast(f32) e; 
    if is_negative { v = -v; } 
    return v;
}

/// Convert first `count` characters from `str` to `s64`.
string_to_s64 :: fn (str: string, count := -1) s64 {
    if count < 0 { count = auto str.len; }
    else if count > str.len { count = auto str.len; }
    n: s64;
    is_negative := false;
    loop count > 0 {
        c :: str[0];
        if c == '-' {
            is_negative = true;
        } else if c >= '0' && c <= '9' {
            n = n * 10 + (auto c - '0');
        } else {
            break;
        }

        consume_char(&str);
        count -= 1;
    }
    if is_negative { n = -n; } 
    return n;
}

/// Split input string `str` into two tokens based on the last occurrence of `delimiter`.
/// Delimiter is not included in resulting tokens. Result tokens only points into original
/// memory of the `str`, they are not supposed to be freed.
/// 
/// When delimiter is not present in the input string function return `false`, `lhs` and
/// `rhs` buffers are not modified, otherwise function return `true` and sets `lhs` and `rhs`
/// to valid values.
/// 
/// Token destination pointers `lhs` and `rhs` are optional. The `di` output variable
/// is set to index of the split position when it's not `null`.
/// 
/// .. warning:: `lhs` and `rhs` sub strings are not guaranteed to be zero terminated and they are not
///              supposed to be freed. 
/// Example
/// -------
/// .. literalinclude:: /examples/docs/010.bl
///    :language: bl
string_split_by_last :: fn (str: string, delimiter: u8, lhs: *string, rhs: *string, di: *s32 = null) bool {
    i := str.len - 1;
    loop ; i >= 0 && str[i] != delimiter; i -= 1 {}

    if i < 0 { // not found
        if lhs { ^lhs = str; }
        if di { (^di) = auto i; }
        return false;
    }

    if lhs {
        lhs.len = i;
        lhs.ptr = str.ptr;
    }

    if rhs {
        rhs.len = str.len - i - 1;
        rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
    }

    if di { (^di) = auto i; }
    return true;
}

/// Split input string `str` at index position and return true when split was done. Result tokens 
/// only points into original memory of the `str`, they are not supposed to be freed. When index is 
/// out of `str` range function return `false`, `lhs` and `rhs` buffers are not modified.
/// 
/// Token destination pointers `lhs` and `rhs` are optional. 
/// 
/// .. warning:: `lhs` and `rhs` sub strings are not guaranteed to be zero terminated and they are not
///              supposed to be freed. 
///  
/// Example
/// -------
/// .. literalinclude:: /examples/docs/011.bl
///    :language: bl
string_split_at_index :: fn (str: string, index: s32, lhs: *string, rhs: *string) bool {
    if index > str.len { return false; }
    if index < 0 { return false; }
    lhsc :: cast(s64) index;
    rhsc :: cast(s64) str.len - index;
    if lhs { ^lhs = {:string: lhsc, str.ptr}; }
    if rhs { ^rhs = {:string: rhsc, ptr_shift_bytes(str.ptr, lhsc)}; }
    return true;
}

/// Split input string `str` into two tokens based on the first occurrence of `delimiter`.
/// Delimiter is not included in resulting tokens. Result tokens only points into original
/// memory of the `str`, they are not supposed to be freed.
/// 
/// When delimiter is not present in the input string function return `false`, `lhs` and
/// `rhs` buffers are not modified, otherwise function return `true` and sets `lhs` and `rhs`
/// to found values.
/// 
/// Token destination pointers `lhs` and `rhs` are optional. 
/// 
/// .. warning:: `lhs` and `rhs` sub strings are not guaranteed to be zero terminated and they are not
///              supposed to be freed. 
///  
/// Example
/// -------
/// .. literalinclude:: /examples/docs/012.bl
///    :language: bl
string_split_by_first :: fn (str: string, delimiter: u8, lhs: *string, rhs: *string, di: *s32 = null) bool {
    i := 0;
    loop ; i < str.len && str[i] != delimiter; i += 1 {}

    if i >= str.len { // not found
        if lhs { ^lhs = str; }
        if di { (^di) = auto i; }
        return false;
    }

    if lhs {
        lhs.len = i;
        lhs.ptr = str.ptr;
    }

    if rhs {
        rhs.len = str.len - i - 1;
        rhs.ptr = ptr_shift_bytes(str.ptr, auto sizeof(u8) * auto i + 1);
    }

    if di { (^di) = auto i; }
    return true;
}

/// Overloaded function inserting one character or other string at desired position.
/// 
/// ::
/// 
///     fn (str: *string, index: s32, v: u8) bool #inline
/// 
/// Insert one character into `str` at `index` and return `true` when character was inserted.
/// 
/// .. note:: The input `str` can be reallocated when `index` is equal to input string `len` and more
///           space is needed.
/// 
/// :: 
/// 
///     fn (str: *string, index: s32, v: string) bool
/// 
/// Insert other string into `str` at `index` and return `true` when string was inserted.
/// 
/// .. note:: The input `str` can be reallocated when `index` is equal to input string `len` and
///           more space is needed.
/// 
/// .. note:: Function does nothing (return `false`) when `v` string is empty.
string_insert :: fn { _string_insert; u8_insert; };

/// Erase one character at `index` position and return true when character
/// was erased. The '`index` value is checked to fit in string bounds.
string_erase :: fn (str: *string, index: s32) bool {
    if str.len == 0 { return false; }
    if index >= str.len { return false; }
    index += 1;
    loop ; index < str.len; index += 1 {
        (^str)[index-1] = (^str)[index];
    }
    str.len -= 1;
    set_terminator(^str);
    return true;
}

/// Split the `str` input string by delimiter and return new slice containing
/// all found sub-strings. 
/// 
/// .. warning:: String slice should be terminated by :ref:`slice_terminate` call.
/// .. warning:: Slice elements are not guaranteed to be zero terminated and they are not
///              supposed to be freed. 
string_split_by :: fn (str: string, delimiter: u8) []string {
    count :: string_count(str, delimiter) + 1;
    ret: []string;
    slice_init(ret, count);
    ri: s32;
    lhs: string;
    rhs: string;
    loop string_split_by_first(str, delimiter, &lhs, &rhs) {
        ret[ri] = lhs;
        ri += 1;
        str = rhs;
    }
    if ri == 0 { ret[ri] = lhs; }
    else       { ret[ri] = rhs; }
    return ret;
}

/// Counts desired character occurrence in the input string.
string_count :: fn (str: string, c: u8) s32 #inline {
    count := 0;
    loop i := 0; i < str.len; i += 1 {
        if str[i] == c { count += 1; }
    }
    return count;
}

/// Converts input string to lower case.
string_to_lower :: fn (str: string) #inline {
    c_tolower :: fn (c: s32) s32 #extern "tolower";
    loop i := 0; i < str.len; i += 1 {
        str[i] = auto c_tolower(auto str[i]); 
    }
}

/// Converts input string to upper case.
string_to_upper :: fn (str: string) #inline {
    c_toupper :: fn (c: s32) s32 #extern "toupper";
    loop i := 0; i < str.len; i += 1 {
        str[i] = auto c_toupper(auto str[i]); 
    }
}

/// Replace all found occurrences of character `c` in the input string with `with`
/// character and return count of replacements made. This function cannot be used with
/// constant string literals as input.
/// 
/// If `with` replacement is 0 character, all `c` occourences will be erased from the string.
/// 
/// Function return count of replaced characters or zero.
string_replace_all :: fn (str: *string, c: u8, with := '\0') s32 {
    replaced := 0;
    loop i := 0; i < (^str).len; i += 1 {
        if (^str)[i] == c { 
            replaced += 1;
            (^str)[i] = with; 
        }
    }
    if with == '\0' {
        shrink_by(str);
    }
    return replaced;
}

/// Calculates string `u32` hash.
string_hash :: fn (str: string) u32 {
	hash : u32 = 5381;
    loop i := 0; i < str.len; i += 1 {
        c :: cast(u32) str[i];
		hash = ((hash << 5) + hash) + c;
    }
    return hash;
}

/// Helper inline function returning `true` when string is null. In such case string
/// `len` cound be any value.
string_is_null  :: fn (s: string) bool #inline { return s.ptr == null; }

/// Helper inline function returning `true` when string is empty. In such case string
/// `ptr` cound be any pointer.
string_is_empty :: fn (s: string) bool #inline { return s.len == 0; }

string_empty :: {:string: 0};

/// Helper inline function returning `true` when string is empty and null. 
string_is_null_or_empty :: fn (s: string) bool #inline { return s.ptr == null || s.len == 0; }


/// Creates substring from passed string starting at `start` index of input string and ending at `start` + `len`
/// index.
/// 
/// Starting index `start` must be greated than 0 and less than `str.len`. `len` specifies optional length of substring.
/// When not specified, length from `start` to the end of the `str` is used.
/// 
/// .. warning:: Result sub-string is not guaranteed to be zero terminated and it's not supposed to
///              be freed.
string_sub :: fn (s: string, start: s64, len : s64 = -1) string #inline {
    if len < -1 { panic("Invalid substring len %", len); }
    if start < 0 { panic("Invalid substring start %", start); }
    if start > s.len { panic("Invalid substring start index %", start); }
    if len == -1 { len = s.len - start; }
    if len == 0 { return string_empty; }
    return {:string: len, &s[start]};
}

/// Checks whether string is zero terminated.
string_is_zero_terminated :: fn (str: string) bool {
    str.len += 1;
    return str[str.len-1] == '\0';
}

#private
STRING_BLOCK_SIZE :: 64 - sizeof(BlockHead);

BlockHead :: struct {
    allocated_size: usize;
    allocator: AllocFn;
};

new :: fn () string {
    tmp : string #noinit;
    tmp.ptr = alloc_block(0, null);
    tmp.len = 0;

    set_terminator(tmp);
    return tmp;
};

new_reserved :: fn (size: usize) string {
    tmp : string #noinit;
    tmp.ptr = alloc_block(size, null);
    tmp.len = 0;

    set_terminator(tmp);
    return tmp;
};

new_copy :: fn (v: string) string {
    tmp : string #noinit;
    tmp.ptr = alloc_block(auto v.len, null);
    tmp.len = v.len;

    memcpy(tmp.ptr, v.ptr, auto v.len);

    set_terminator(tmp);
    return tmp;
};

new_cstr :: fn (cstr: *u8) string {
    len :: c_strlen(auto cstr);
    tmp: string #noinit;
    tmp.ptr = alloc_block(len, null);
    tmp.len = auto len;

    memcpy(tmp.ptr, cstr, len * sizeof(u8));
    set_terminator(tmp);

    return tmp;
}

make_more_room_if_needed :: fn (ptr: *u8, size: usize) *u8 {
    head :: get_allocated_size(ptr);
    allocated :: head.allocated_size;
    allocator :: head.allocator;
    if size > allocated {
        new_ptr := alloc_block(size, allocator);
        memcpy(new_ptr, ptr, allocated);
        free(get_allocation_ptr(ptr));

        ptr = new_ptr;
    }

    return ptr;
};

alloc_block :: fn (size: usize, allocator: AllocFn) *u8 {
    if !allocator { allocator = _context.alloc_fn; }
    d := size / STRING_BLOCK_SIZE + 1;
    size = d * STRING_BLOCK_SIZE;

    alloc_size := size + sizeof(BlockHead) + sizeof(u8);
    tmp := cast(*BlockHead) allocator(AllocOp.Allocate, alloc_size, null, #file, #line);
    if tmp == null { panic(); }
    tmp.allocated_size = size; 
    tmp.allocator = allocator;

    return cast(*u8) (cast(usize) tmp + sizeof(BlockHead));
};

free_block :: fn (ptr: *u8) {
    head :: get_allocated_size(ptr);
    allocator :: head.allocator;
    allocator(AllocOp.Free, 0, get_allocation_ptr(ptr), #file, #line);
};

get_allocation_ptr :: fn (ptr: *u8) *u8 {
    return cast(*u8) ((cast(usize) ptr) - sizeof(BlockHead));
};

get_allocated_size :: fn (ptr: *u8) *BlockHead #inline {
    return cast(*BlockHead) get_allocation_ptr(ptr);
};

set_terminator :: fn (v: string) {
    v.len += 1;
    v[v.len - 1] = 0;
    v.len -= 1;
};

consume_char :: fn (s: *string) u8 #inline {
    c :: (^s)[0];
    if s.len > 1 { s.ptr = &(^s)[1]; }
    s.len -= 1;

    return c;
}

shrink_by :: fn (str: *string, c := '\0') {
    tmp := ^str;
    n := 0;
    is := -1;
    loop i := 0; i < tmp.len; i += 1 {
        if tmp[i] == c {
            if is < 0 { is = i; }
            n += 1;
        } else if is > -1 {
            buf :: tmp[is];
            tmp[is] = tmp[i];
            tmp[i] = buf;
            is = -1;
            i = is + 1;
            n = 0;
        }
    }
    tmp.len -= n;
    ^str = tmp;
}

u8_insert :: fn (str: *string, index: s32, v: u8) bool #inline {
    return _string_insert(str, index, {:string: 1, &v});
}

_string_insert :: fn (str: *string, index: s32, v: string) bool {
    if !str { panic("Input string is null!"); }
    if v.len == 0 { return false; }
    if index > str.len { return false; }
    if index == str.len { // appending
        string_append(str, v);
        return true;
    }

    orig_len :: str.len;
    new_len :: str.len + v.len;
    str.ptr = make_more_room_if_needed(str.ptr, auto new_len);
    str.len = new_len;
    loop i := orig_len-1; i >= index; i -= 1 {
        (^str)[i+v.len] = (^str)[i];
    }
    loop i := 0; i < v.len; i += 1 {
        (^str)[i+index] = v[i];
    }
    set_terminator(^str);
    return true;
}
