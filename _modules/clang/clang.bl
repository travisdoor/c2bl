CXIndex :: *u8;
CXTranslationUnit :: *u8;
CXClientData :: *u8;
CXModule :: *u8;
CXFile :: *u8; 
CXEvalResult :: *u8;
CXCursorVisitor :: * fn (CXCursor, CXCursor, CXClientData) CXChildVisitResult;

CXUnsavedFile :: struct {
    Filename: *u8;
    Contents: *u8;
    Length: u64
}

CXString :: struct {
    data: *u8; 
    private_flags: s32
}

CXSourceLocation :: struct {
  ptr_data: [2]*u8;
  int_data: u32
}

CXType :: struct {
    kind: CXTypeKind;
    data: [2]*u8
}

CXToken :: struct {
  int_data: [4]u32;
  ptr_data: *u8;
} 

CXCursor :: struct {
    kind: CXCursorKind;
    xdata: s32;
    data: [3]*u8
}

CXErrorCode :: enum {
    Success :: 0;
    Failure :: 1;
    Crashed :: 2;
    InvalidArguments :: 3;
    ASTReadError :: 4
}

CXSourceRange :: struct {
    ptr_data: [2]*u8;
    begin_int_data: u32;
    end_int_data: u32;
}

CXTranslationUnit_Flags :: enum {
    None :: 0x0;
    DetailedPreprocessingRecord :: 0x01;
    Incomplete :: 0x02;
    PrecompiledPreamble :: 0x04;
    CacheCompletionResults :: 0x08;
    ForSerialization :: 0x10;
    CXXChainedPCH :: 0x20;
    SkipFunctionBodies :: 0x40;
    IncludeBriefCommentsInCodeCompletion :: 0x80;
    CreatePreambleOnFirstParse :: 0x100;
    KeepGoing :: 0x200;
    SingleFileParse :: 0x400;
    LimitSkipFunctionBodiesToPreamble :: 0x800;
    IncludeAttributedTypes :: 0x1000;
    VisitImplicitAttributes :: 0x2000;
    IgnoreNonErrorsFromIncludedFiles :: 0x4000
}

CXChildVisitResult :: enum {
    Break;
    Continue;
    Recurse;
}

CXTypeKind :: enum {
    Invalid :: 0;
    Unexposed :: 1;
    Void :: 2;
    Bool :: 3;
    Char_U :: 4;
    UChar :: 5;
    Char16 :: 6;
    Char32 :: 7;
    UShort :: 8;
    UInt :: 9;
    ULong :: 10;
    ULongLong :: 11;
    UInt128 :: 12;
    Char_S :: 13;
    SChar :: 14;
    WChar :: 15;
    Short :: 16;
    Int :: 17;
    Long :: 18;
    LongLong :: 19;
    Int128 :: 20;
    Float :: 21;
    Double :: 22;
    LongDouble :: 23;
    NullPtr :: 24;
    Overload :: 25;
    Dependent :: 26;
    ObjCId :: 27;
    ObjCClass :: 28;
    ObjCSel :: 29;
    Float128 :: 30;
    Half :: 31;
    Float16 :: 32;
    ShortAccum :: 33;
    Accum :: 34;
    LongAccum :: 35;
    UShortAccum :: 36;
    UAccum :: 37;
    ULongAccum :: 38;
    FirstBuiltin :: Void;
    LastBuiltin :: ULongAccum;

    Complex :: 100;
    Pointer :: 101;
    BlockPointer :: 102;
    LValueReference :: 103;
    RValueReference :: 104;
    Record :: 105;
    Enum :: 106;
    Typedef :: 107;
    ObjCInterface :: 108;
    ObjCObjectPointer :: 109;
    FunctionNoProto :: 110;
    FunctionProto :: 111;
    ConstantArray :: 112;
    Vector :: 113;
    IncompleteArray :: 114;
    VariableArray :: 115;
    DependentSizedArray :: 116;
    MemberPointer :: 117;
    Auto :: 118;
    Elaborated :: 119;
    Pipe :: 120;
    OCLImage1dRO :: 121;
    OCLImage1dArrayRO :: 122;
    OCLImage1dBufferRO :: 123;
    OCLImage2dRO :: 124;
    OCLImage2dArrayRO :: 125;
    OCLImage2dDepthRO :: 126;
    OCLImage2dArrayDepthRO :: 127;
    OCLImage2dMSAARO :: 128;
    OCLImage2dArrayMSAARO :: 129;
    OCLImage2dMSAADepthRO :: 130;
    OCLImage2dArrayMSAADepthRO :: 131;
    OCLImage3dRO :: 132;
    OCLImage1dWO :: 133;
    OCLImage1dArrayWO :: 134;
    OCLImage1dBufferWO :: 135;
    OCLImage2dWO :: 136;
    OCLImage2dArrayWO :: 137;
    OCLImage2dDepthWO :: 138;
    OCLImage2dArrayDepthWO :: 139;
    OCLImage2dMSAAWO :: 140;
    OCLImage2dArrayMSAAWO :: 141;
    OCLImage2dMSAADepthWO :: 142;
    OCLImage2dArrayMSAADepthWO :: 143;
    OCLImage3dWO :: 144;
    OCLImage1dRW :: 145;
    OCLImage1dArrayRW :: 146;
    OCLImage1dBufferRW :: 147;
    OCLImage2dRW :: 148;
    OCLImage2dArrayRW :: 149;
    OCLImage2dDepthRW :: 150;
    OCLImage2dArrayDepthRW :: 151;
    OCLImage2dMSAARW :: 152;
    OCLImage2dArrayMSAARW :: 153;
    OCLImage2dMSAADepthRW :: 154;
    OCLImage2dArrayMSAADepthRW :: 155;
    OCLImage3dRW :: 156;
    OCLSampler :: 157;
    OCLEvent :: 158;
    OCLQueue :: 159;
    OCLReserveID :: 160;

    ObjCObject :: 161;
    ObjCTypeParam :: 162;
    Attributed :: 163;

    OCLIntelSubgroupAVCMcePayload :: 164;
    OCLIntelSubgroupAVCImePayload :: 165;
    OCLIntelSubgroupAVCRefPayload :: 166;
    OCLIntelSubgroupAVCSicPayload :: 167;
    OCLIntelSubgroupAVCMceResult :: 168;
    OCLIntelSubgroupAVCImeResult :: 169;
    OCLIntelSubgroupAVCRefResult :: 170;
    OCLIntelSubgroupAVCSicResult :: 171;
    OCLIntelSubgroupAVCImeResultSingleRefStreamout :: 172;
    OCLIntelSubgroupAVCImeResultDualRefStreamout :: 173;
    OCLIntelSubgroupAVCImeSingleRefStreamin :: 174;

    OCLIntelSubgroupAVCImeDualRefStreamin :: 175;

    ExtVector :: 176
};

CXCursorKind :: enum {
    UnexposedDecl                 :: 1;
    StructDecl                    :: 2;
    UnionDecl                     :: 3;
    ClassDecl                     :: 4;
    EnumDecl                      :: 5;
    FieldDecl                     :: 6;
    EnumConstantDecl              :: 7;
    FunctionDecl                  :: 8;
    VarDecl                       :: 9;
    ParmDecl                      :: 10;
    ObjCInterfaceDecl             :: 11;
    ObjCCategoryDecl              :: 12;
    ObjCProtocolDecl              :: 13;
    ObjCPropertyDecl              :: 14;
    ObjCIvarDecl                  :: 15;
    ObjCInstanceMethodDecl        :: 16;
    ObjCClassMethodDecl           :: 17;
    ObjCImplementationDecl        :: 18;
    ObjCCategoryImplDecl          :: 19;
    TypedefDecl                   :: 20;
    CXXMethod                     :: 21;
    Namespace                     :: 22;
    LinkageSpec                   :: 23;
    Constructor                   :: 24;
    Destructor                    :: 25;
    ConversionFunction            :: 26;
    TemplateTypeParameter         :: 27;
    NonTypeTemplateParameter      :: 28;
    TemplateTemplateParameter     :: 29;
    FunctionTemplate              :: 30;
    ClassTemplate                 :: 31;
    ClassTemplatePartialSpecialization :: 32;
    NamespaceAlias                :: 33;
    UsingDirective                :: 34;
    UsingDeclaration              :: 35;
    TypeAliasDecl                 :: 36;
    ObjCSynthesizeDecl            :: 37;
    ObjCDynamicDecl               :: 38;
    CXXAccessSpecifier            :: 39;

    FirstDecl                     :: UnexposedDecl;
    LastDecl                      :: CXXAccessSpecifier;

    FirstRef                      :: 40; /* Decl references */
    ObjCSuperClassRef             :: 40;
    ObjCProtocolRef               :: 41;
    ObjCClassRef                  :: 42;
    TypeRef                       :: 43;
    CXXBaseSpecifier              :: 44;
    TemplateRef                   :: 45;
    NamespaceRef                  :: 46;
    MemberRef                     :: 47;
    LabelRef                      :: 48;
    OverloadedDeclRef             :: 49;
    VariableRef                   :: 50;
    LastRef                       :: VariableRef;
    FirstInvalid                  :: 70;
    InvalidFile                   :: 70;
    NoDeclFound                   :: 71;
    NotImplemented                :: 72;
    InvalidCode                   :: 73;
    LastInvalid                   :: InvalidCode;
    FirstExpr                     :: 100;
    UnexposedExpr                 :: 100;
    DeclRefExpr                   :: 101;
    MemberRefExpr                 :: 102;
    CallExpr                      :: 103;
    ObjCMessageExpr               :: 104;
    BlockExpr                     :: 105;
    IntegerLiteral                :: 106;
    FloatingLiteral               :: 107;
    ImaginaryLiteral              :: 108;
    StringLiteral                 :: 109;
    CharacterLiteral              :: 110;
    ParenExpr                     :: 111;
    UnaryOperator                 :: 112;
    ArraySubscriptExpr            :: 113;
    BinaryOperator                :: 114;
    CompoundAssignOperator        :: 115;
    ConditionalOperator           :: 116;
    CStyleCastExpr                :: 117;
    CompoundLiteralExpr           :: 118;
    InitListExpr                  :: 119;
    AddrLabelExpr                 :: 120;
    StmtExpr                      :: 121;
    GenericSelectionExpr          :: 122;
    GNUNullExpr                   :: 123;
    CXXStaticCastExpr             :: 124;
    CXXDynamicCastExpr            :: 125;
    CXXReinterpretCastExpr        :: 126;
    CXXConstCastExpr              :: 127;
    CXXFunctionalCastExpr         :: 128;
    CXXTypeidExpr                 :: 129;
    CXXBoolLiteralExpr            :: 130;
    CXXNullPtrLiteralExpr         :: 131;
    CXXThisExpr                   :: 132;
    CXXThrowExpr                  :: 133;
    CXXNewExpr                    :: 134;
    CXXDeleteExpr                 :: 135;
    UnaryExpr                     :: 136;
    ObjCStringLiteral             :: 137;
    ObjCEncodeExpr                :: 138;
    ObjCSelectorExpr              :: 139;
    ObjCProtocolExpr              :: 140;
    ObjCBridgedCastExpr           :: 141;
    PackExpansionExpr             :: 142;
    SizeOfPackExpr                :: 143;
    LambdaExpr                    :: 144;
    ObjCBoolLiteralExpr           :: 145;
    ObjCSelfExpr                  :: 146;
    OMPArraySectionExpr           :: 147;
    ObjCAvailabilityCheckExpr     :: 148;
    FixedPointLiteral             :: 149;
    LastExpr                      :: FixedPointLiteral;
    FirstStmt                     :: 200;
    UnexposedStmt                 :: 200;
    LabelStmt                     :: 201;
    CompoundStmt                  :: 202;
    CaseStmt                      :: 203;
    DefaultStmt                   :: 204;
    IfStmt                        :: 205;
    SwitchStmt                    :: 206;
    WhileStmt                     :: 207;
    DoStmt                        :: 208;
    ForStmt                       :: 209;
    GotoStmt                      :: 210;
    IndirectGotoStmt              :: 211;
    ContinueStmt                  :: 212;
    BreakStmt                     :: 213;
    ReturnStmt                    :: 214;
    GCCAsmStmt                    :: 215;
    AsmStmt                       :: GCCAsmStmt;
    ObjCAtTryStmt                 :: 216;
    ObjCAtCatchStmt               :: 217;
    ObjCAtFinallyStmt             :: 218;
    ObjCAtThrowStmt               :: 219;
    ObjCAtSynchronizedStmt        :: 220;
    ObjCAutoreleasePoolStmt       :: 221;
    ObjCForCollectionStmt         :: 222;
    CXXCatchStmt                  :: 223;
    CXXTryStmt                    :: 224;
    CXXForRangeStmt               :: 225;
    SEHTryStmt                    :: 226;
    SEHExceptStmt                 :: 227;
    SEHFinallyStmt                :: 228;
    MSAsmStmt                     :: 229;
    NullStmt                      :: 230;
    DeclStmt                      :: 231;
    OMPParallelDirective          :: 232;
    OMPSimdDirective              :: 233;
    OMPForDirective               :: 234;
    OMPSectionsDirective          :: 235;
    OMPSectionDirective           :: 236;
    OMPSingleDirective            :: 237;
    OMPParallelForDirective       :: 238;
    OMPParallelSectionsDirective  :: 239;
    OMPTaskDirective              :: 240;
    OMPMasterDirective            :: 241;
    OMPCriticalDirective          :: 242;
    OMPTaskyieldDirective         :: 243;
    OMPBarrierDirective           :: 244;
    OMPTaskwaitDirective          :: 245;
    OMPFlushDirective             :: 246;
    SEHLeaveStmt                  :: 247;
    OMPOrderedDirective           :: 248;
    OMPAtomicDirective            :: 249;
    OMPForSimdDirective           :: 250;
    OMPParallelForSimdDirective   :: 251;
    OMPTargetDirective            :: 252;
    OMPTeamsDirective             :: 253;
    OMPTaskgroupDirective         :: 254;
    OMPCancellationPointDirective :: 255;
    OMPCancelDirective            :: 256;
    OMPTargetDataDirective        :: 257;
    OMPTaskLoopDirective          :: 258;
    OMPTaskLoopSimdDirective      :: 259;
    OMPDistributeDirective        :: 260;
    OMPTargetEnterDataDirective   :: 261;
    OMPTargetExitDataDirective    :: 262;
    OMPTargetParallelDirective    :: 263;
    OMPTargetParallelForDirective :: 264;
    OMPTargetUpdateDirective      :: 265;
    OMPDistributeParallelForDirective :: 266;
    OMPDistributeParallelForSimdDirective :: 267;
    OMPDistributeSimdDirective :: 268;
    OMPTargetParallelForSimdDirective :: 269;
    OMPTargetSimdDirective :: 270;
    OMPTeamsDistributeDirective :: 271;
    OMPTeamsDistributeSimdDirective :: 272;
    OMPTeamsDistributeParallelForSimdDirective :: 273;
    OMPTeamsDistributeParallelForDirective :: 274;
    OMPTargetTeamsDirective :: 275;
    OMPTargetTeamsDistributeDirective :: 276;
    OMPTargetTeamsDistributeParallelForDirective :: 277;
    OMPTargetTeamsDistributeParallelForSimdDirective :: 278;
    OMPTargetTeamsDistributeSimdDirective :: 279;
    BuiltinBitCastExpr :: 280;
    LastStmt :: BuiltinBitCastExpr;
    TranslationUnit               :: 300;
    FirstAttr                     :: 400;
    UnexposedAttr                 :: 400;

    IBActionAttr                  :: 401;
    IBOutletAttr                  :: 402;
    IBOutletCollectionAttr        :: 403;
    CXXFinalAttr                  :: 404;
    CXXOverrideAttr               :: 405;
    AnnotateAttr                  :: 406;
    AsmLabelAttr                  :: 407;
    PackedAttr                    :: 408;
    PureAttr                      :: 409;
    ConstAttr                     :: 410;
    NoDuplicateAttr               :: 411;
    CUDAConstantAttr              :: 412;
    CUDADeviceAttr                :: 413;
    CUDAGlobalAttr                :: 414;
    CUDAHostAttr                  :: 415;
    CUDASharedAttr                :: 416;
    VisibilityAttr                :: 417;
    DLLExport                     :: 418;
    DLLImport                     :: 419;
    NSReturnsRetained             :: 420;
    NSReturnsNotRetained          :: 421;
    NSReturnsAutoreleased         :: 422;
    NSConsumesSelf                :: 423;
    NSConsumed                    :: 424;
    ObjCException                 :: 425;
    ObjCNSObject                  :: 426;
    ObjCIndependentClass          :: 427;
    ObjCPreciseLifetime           :: 428;
    ObjCReturnsInnerPointer       :: 429;
    ObjCRequiresSuper             :: 430;
    ObjCRootClass                 :: 431;
    ObjCSubclassingRestricted     :: 432;
    ObjCExplicitProtocolImpl      :: 433;
    ObjCDesignatedInitializer     :: 434;
    ObjCRuntimeVisible            :: 435;
    ObjCBoxable                   :: 436;
    FlagEnum                      :: 437;
    ConvergentAttr                :: 438;
    WarnUnusedAttr                :: 439;
    WarnUnusedResultAttr          :: 440;
    AlignedAttr                   :: 441;
    LastAttr                      :: AlignedAttr;

    PreprocessingDirective        :: 500;
    MacroDefinition               :: 501;
    MacroExpansion                :: 502;
    MacroInstantiation            :: MacroExpansion;
    InclusionDirective            :: 503;
    FirstPreprocessing            :: PreprocessingDirective;
    LastPreprocessing             :: InclusionDirective;
    ModuleImportDecl              :: 600;
    TypeAliasTemplateDecl         :: 601;
    StaticAssert                  :: 602;
    FriendDecl                    :: 603;
    FirstExtraDecl                :: ModuleImportDecl;
    LastExtraDecl                 :: FriendDecl;
    OverloadCandidate             :: 700
};

clang_createIndex :: fn (excludeDeclarationsFromPCH: s32, displayDiagnostics: s32) CXIndex #extern;
clang_disposeIndex :: fn (index: CXIndex) #extern;
clang_parseTranslationUnit :: fn (CIdx: CXIndex, source_filename: *u8, command_line_args: *u8, num_command_line_args: s32, unsaved_files: *CXUnsavedFile, num_unsaved_files: u32, options: u32) CXTranslationUnit #extern;
clang_parseTranslationUnit2 :: fn (CIdx: CXIndex, source_filename: *u8, command_line_args: *u8, num_command_line_args: s32, unsaved_files: *CXUnsavedFile, num_unsaved_files: u32, options: u32, out_TU: *CXTranslationUnit) CXErrorCode #extern;
clang_visitChildren :: fn (parent: CXCursor, visitor: CXCursorVisitor, client_data: CXClientData) u32 #extern;
clang_getCursorSpelling :: fn (cursor: CXCursor) CXString #extern;
clang_getCursorResultType :: fn (cursor: CXCursor) CXType #extern;
clang_getTranslationUnitCursor :: fn (tu: CXTranslationUnit) CXCursor #extern;
clang_disposeTranslationUnit :: fn (tu: CXTranslationUnit) #extern;
clang_getCursorType :: fn (C: CXCursor) CXType #extern;
clang_Cursor_getNumArguments :: fn (C: CXCursor) s32 #extern;
clang_Cursor_getArgument :: fn (C: CXCursor, i: u32) CXCursor #extern;
clang_getPointeeType :: fn (T: CXType) CXType #extern; 
clang_getTypeDeclaration :: fn (T: CXType) CXCursor #extern;
clang_getTypedefDeclUnderlyingType :: fn (C: CXCursor) CXType #extern;
clang_getTypedefName :: fn (CT: CXType) CXString #extern;
clang_Cursor_getModule :: fn (C: CXCursor) CXModule #extern;
clang_Module_getName :: fn (Module: CXModule) CXString #extern;
clang_Location_isFromMainFile :: fn (location: CXSourceLocation) s32 #extern;
clang_getCursorLocation :: fn (C: CXCursor) CXSourceLocation #extern;
clang_getEnumConstantDeclValue :: fn (C: CXCursor) s64 #extern; 
clang_isCursorDefinition :: fn (C: CXCursor) bool #extern;
clang_getCanonicalType :: fn (T: CXType) CXType #extern;
clang_equalCursors :: fn (a: CXCursor, b: CXCursor) bool #extern;
clang_hashCursor :: fn (C: CXCursor) u32 #extern;
clang_isDeclaration :: fn (CK: CXCursorKind) bool #extern;
clang_getCanonicalCursor :: fn (C: CXCursor) CXCursor #extern;
clang_getExpansionLocation :: fn (location: CXSourceLocation, file: *CXFile, line: *u32, column: *u32, offset: *u32) #extern;
clang_getCursorDefinition :: fn (C: CXCursor) CXCursor #extern;
clang_getNumArgTypes :: fn (T: CXType) s32 #extern;
clang_getArgType :: fn (T: CXType, i: s32) CXType #extern;
clang_getResultType :: fn (T: CXType) CXType #extern;
clang_getNumElements :: fn (T: CXType) s64 #extern;
clang_getArrayElementType :: fn (T: CXType) CXType #extern;
clang_getCString :: fn (s: CXString) *c_char #extern;
clang_disposeString :: fn (s: *c_char) #extern;
clang_Type_isTransparentTagTypedef :: fn (T: CXType) c_uint #extern;
clang_Cursor_isAnonymous :: fn (C: CXCursor) c_uint #extern;
clang_getTypeSpelling :: fn (CT: CXType) CXString #extern;
clang_equalTypes :: fn (A: CXType, B: CXType) u32 #extern;
clang_Cursor_isMacroFunctionLike :: fn (C: CXCursor) u32 #extern;
clang_Cursor_isMacroBuiltin :: fn (C: CXCursor) u32 #extern;
clang_Cursor_Evaluate :: fn (C: CXCursor) CXEvalResult #extern;
clang_EvalResult_getAsInt :: fn (E: CXEvalResult) s32 #extern;
clang_EvalResult_getAsStr :: fn (E: CXEvalResult) *u8 #extern;
clang_getToken :: fn (TU: CXTranslationUnit, Location: CXSourceLocation) *CXToken #extern;
clang_getTokenSpelling :: fn (TU: CXTranslationUnit, T: CXToken) CXString #extern; 
clang_Cursor_getTranslationUnit :: fn (C: CXCursor) CXTranslationUnit #extern;
clang_getCursorExtent :: fn (C: CXCursor) CXSourceRange #extern;
clang_tokenize :: fn (TU: CXTranslationUnit, Range: CXSourceRange, Tokens: **CXToken, NumTokens: *u32) #extern;
clang_disposeTokens :: fn (TU: CXTranslationUnit, Tokens: *CXToken, NumTokens: u32) #extern;